{"version":3,"sources":["components/Firebase/firebase.js","components/HomeList.js","components/QuizConfigModal.js","components/EditQuestion.js","components/QuestionsConfigModal.js","containers/Accueil.js","App.js","serviceWorker.js","index.js"],"names":["app","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","db","firebase","firestore","storage","CenterContainer","styled","Container","textAlign","HomeList","state","openListItemDelete","quizId","questionSourceId","switchOpenDelete","type","id","_this","setState","handleItemListDelete","collection","doc","toString","get","then","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","delete","catch","error","props","updateQuestionsAll","stop","_x","apply","this","arguments","_ref2","_callee2","_context2","updateQuizAll","_x2","addQuestionSource","data","length","questions_id","set","answersList","questions_name","quizQuestionList","answers","feedback","possibilities","question_id","question_prequel","imageURLQB","imageURLQE","imageNameQB","imageNameQE","console","log","addQuiz","config","quiz_id","SubLines","passScore","quiz_time","setShuffle","quiz_title","quiz_title2","pauseButton","chronoButton","questionsSetId","shuffledAnswers","showResultConfig","quiz_n_questions","quiz_n_questionsMax","answers_file_name","question_file_name","downloadSCORMPackage","quiz","concat","_this2","isQuestionList","react_default","createElement","Fragment","List","component","aria-label","map","index","title","ListItem","button","key","ListItemText","primary","edge","ListItemSecondaryAction","Tooltip","IconButton","onClick","handleClick","Settings_default","Link","href","getLink","target","Visibility_default","GetApp_default","Edit_default","Delete_default","maxWidth","color","AddCircle_default","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogActions","Button","autoFocus","React","Component","ModalContainer","backgroundColor","minHeight","top","left","transform","position","paddingRight","overflowY","overflowX","height","MarginTopGrid","Grid","marginTop","WithMarginTypography","Typography","FixedHeightGrid","FixedGrid","BackgroundContainer","margin","paddingTop","paddingBottom","StyledWidthFormControl","FormControl","width","StyledFormControlLabel","FormControlLabel","bottom","SaveButton","borderRadius","QuizConfigModal","selectedQuestionSet","setQuestionSet","where","querySnapshot","forEach","question","componentDidMount","handleSaveConfig","configPre","configPost","switchDataSend","handleCloseModal","value","SubLinesStep","toConsumableArray","_this$state","TextField","label","onChange","e","fullWidth","variant","display","line","multiline","onTextChange","container","spacing","item","xs","control","Checkbox","labelPlacement","checked","onCheckBoxChange","onValueChange","parseInt","InputLabel","Select","questionsAll","questions","MenuItem","size","Save_default","MaxImage","styledMU","Img","_templateObject","CenterContentGrid","justifyContent","alignItems","flexDirection","PaddingTypography","EditQuestion","progressQB","progressQE","isUploadingQB","isUploadingQE","openQuestionDelete","openReponseDelete","openPopoverEnonce","openPopoverExplication","setQuestion","getQuestionObject","handleUploadStartQB","handleProgressQB","handleUploadErrorQB","handleUploadSuccessQB","filename","ref","child","getDownloadURL","url","saveQuestionLocalChange","number","handleUploadStartQE","handleProgressQE","handleUploadErrorQE","handleUploadSuccessQE","possibilitiesStep","handleChangeCheckbox","answerIndex","questionIndex","answersStep","repIndex","handleQuestionDelete","handleDeleteQuestion","handleReponseDelete","possStep","splice","preventDefault","anchorElEnonce","currentTarget","anchorElExplication","EditQuestion_BackgroundContainer","style","align","aria-describedby","undefined","handleClickPopoverEnonce","Popover","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","handleClosePopoverEnonce","disableRestoreFocus","src","alt","loader","CircularProgress","FormLabel","CloudUpload_default","fontSize","lib_default","accept","name","file","storageRef","onUploadStart","onUploadError","onUploadSuccess","onProgress","hidden","rep","justify","handleClickPopoverExplication","handleClosePopoverExplication","getDerivedStateFromProps","nextProps","prevState","StyledTextField","StyledIconButton","alignSelf","FlexGrid","FlexGrid2","ButtonsGrid","QuestionsConfigModal","scrollToIndex","searchedQuestionNb","actualQuestionsSource","quizQuestionListStep","onAddNewQuestion","newQuestion","push","answersListStep","Array","from","onScrollToRowChange","handleSaveQuestionsSource","findIndex","exportXLSX","dataToSend","_","cloneDeep","join","ws","XLSX","utils","json_to_sheet","wb","book_new","book_append_sheet","writeFile","importXLSX","saveOnImportXLSX","oFile","files","reader","FileReader","onload","result","Uint8Array","workbook","read","SheetNames","sheetName","roa","sheet_to_json","Sheets","readyState","split","readAsArrayBuffer","rowRenderer","parent","isScrolling","isVisible","es","cache","columnIndex","rowIndex","EditQuestion_EditQuestion","CellMeasurerCache","fixedWidth","defaultHeight","rowCount","rowCountIndexBased","Math","min","isNaN","QuestionsConfigModal_ModalContainer","Search_default","ArrowDownward_default","htmlFor","ArrowUpward_default","QuestionsConfigModal_SaveButton","_ref3","deferredMeasurementCache","rowHeight","overscanRowCount","HeadContainer","ScrollableModal","Modal","overflow","Accueil","selectedTab","openModalConfig","actualQuiz","quizAll","quizDataSend","questionsDataSend","openQuestionsConfig","handleChange","event","newValue","handleSnackbarClose","orderBy","_this3","_this4","gutterBottom","paragraph","Tabs","centered","textColor","Tab","QuizConfigModal_QuizConfigModal","QuestionsConfigModal_QuestionsConfigModal","HomeList_HomeList","Snackbar","autoHideDuration","ContentProps","message","action","Close_default","App","containers_Accueil","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21eaff86.chunk.js","sourcesContent":["import app from 'firebase/app';\n//import 'firebase/database';\nimport firebase from 'firebase';\n// Required for side-effects\n//import { firestoreExport } from 'node-firestore-import-export';\n//import * as firebase from 'firebase-admin';\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n};\n\napp.initializeApp(config);\n\nvar db = firebase.firestore();\nvar storage = firebase.storage();\n\nexport { db, storage };\n","import React from 'react';\nimport { db } from './Firebase/firebase';\n// import {\n//   List,\n//   CellMeasurer,\n//   CellMeasurerCache,\n//   AutoSizer\n// } from 'react-virtualized';\n\nimport Link from '@material-ui/core/Link';\nimport List from '@material-ui/core/List';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport ListItem from '@material-ui/core/ListItem';\nimport Container from '@material-ui/core/Container';\nimport { styled } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n\nimport EditIcon from '@material-ui/icons/Edit';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\n\nconst CenterContainer = styled(Container)({\n  textAlign: 'center'\n});\n\nexport default class HomeList extends React.Component {\n  state = {\n    openListItemDelete: false\n  };\n\n  getLink(quiz) {\n    if (quiz.config.quiz_id.toString().length === 1 || 2) {\n      return (\n        'https://preprod.daylight-back.themoocagency.com/daylightQuizEditor/quizChapter/pre/chap' +\n        `${quiz.config.quiz_id}`\n      );\n    } else if (quiz.config.quiz_id.toString().length === 3) {\n      return (\n        'https://preprod.daylight-back.themoocagency.com/daylightQuizEditor/quizChapter/post/chap' +\n        `${quiz.config.quiz_id.toString()[2]}`\n      );\n    }\n  }\n\n  quizId = 0;\n  questionSourceId = 0;\n\n  switchOpenDelete = (type, id) => {\n    this.setState({ openListItemDelete: !this.state.openListItemDelete });\n    if (id) {\n      switch (type) {\n        case 'questionSource':\n          this.questionSourceId = id;\n          break;\n        case 'quiz':\n          this.quizId = id;\n          break;\n        default:\n          return;\n      }\n    }\n  };\n\n  handleItemListDelete = type => {\n    if (type === 'questionSource') {\n      db.collection('questions')\n        .doc(this.questionSourceId.toString())\n        .get()\n        .then(async doc => {\n          await db\n            .collection('questions')\n            .doc(this.questionSourceId.toString())\n            .delete()\n            .then(function() {\n              //console.log('Document successfully deleted!');\n            })\n            .catch(function(error) {\n              //console.error('Error removing document: ', error);\n            });\n\n          this.switchOpenDelete();\n          this.props.updateQuestionsAll();\n        });\n    } else if (type === 'quiz') {\n      db.collection('quiz')\n        .doc(this.quizId.toString())\n        .get()\n        .then(async doc => {\n          await db\n            .collection('quiz')\n            .doc(this.quizId.toString())\n            .delete()\n            .then(function() {\n              //console.log('Document successfully deleted!');\n            })\n            .catch(function(error) {\n              //console.error('Error removing document: ', error);\n            });\n\n          this.switchOpenDelete();\n          this.props.updateQuizAll();\n        });\n    }\n  };\n\n  addQuestionSource = () => {\n    db.collection('questions')\n      .doc(\n        (\n          this.props.data[this.props.data.length - 1].questions_id + 1\n        ).toString()\n      )\n      .set({\n        answersList: [1], //TODO ? peupler\n        questions_id:\n          this.props.data[this.props.data.length - 1].questions_id + 1,\n        questions_name:\n          'Source de questions ' + //TODO ?\n          (this.props.data[this.props.data.length - 1].questions_id + 1),\n        quizQuestionList: [\n          {\n            answers: [true, false, false, false],\n            feedback: '',\n            possibilities: ['', '', '', ''],\n            question_id: 1,\n            question_prequel: '',\n            imageURLQB: '',\n            imageURLQE: '',\n            imageNameQB: '',\n            imageNameQE: ''\n          }\n        ]\n      })\n      .then(function() {\n        console.log('Document successfully written!');\n      })\n      .catch(function(error) {\n        console.error('Error writing document: ', error);\n      });\n    this.props.updateQuestionsAll(); //encore useful si open modal ?\n    //todo open modal correspondant\n  };\n\n  addQuiz = () => {\n    db.collection('quiz')\n      .doc((this.props.data.length + 1).toString())\n      .set({\n        config: {\n          quiz_id: this.props.data.length + 1,\n          SubLines: ['', '', '', ''],\n          passScore: 0,\n          quiz_time: 0,\n          setShuffle: false,\n          quiz_title: 'Titre',\n          quiz_title2: 'Sous-titre',\n          pauseButton: false,\n          chronoButton: false,\n          questionsSetId: 1,\n          shuffledAnswers: false,\n          showResultConfig: false,\n          quiz_n_questions: 0,\n          quiz_n_questionsMax: 0,\n          answers_file_name: '',\n          question_file_name: ''\n        }\n      })\n      .then(function() {\n        console.log('Document successfully written!');\n      })\n      .catch(function(error) {\n        console.error('Error writing document: ', error);\n      });\n    this.props.updateQuizAll(); //encore useful si open modal ?\n    //todo open modal correspondant\n  };\n\n  downloadSCORMPackage = quiz => {\n    if (quiz.config.quiz_id.toString().length === 1 || 2) {\n      return `https://preprod.daylight-back.themoocagency.com/daylightQuizEditor/quizChapter/pre/chap${\n        quiz.config.quiz_id\n      }/chap${quiz.config.quiz_id}.zip`;\n    } else if (quiz.config.quiz_id.toString().length === 3) {\n      return `https://preprod.daylight-back.themoocagency.com/daylightQuizEditor/quizChapter/post/chap${\n        quiz.config.quiz_id.toString()[2]\n      }chap${quiz.config.quiz_id.toString()[2]}.zip`;\n    }\n  };\n\n  //REACT VIRTUALIZED\n  // rowRenderer = ({ key, index, parent, style, isScrolling, isVisible }) => {\n  //   const { isQuestionList, data } = this.props;\n\n  //   const title = isQuestionList\n  //     ? data[index].questions_name\n  //     : data[index].config.quiz_title + ' // ' + data[index].config.quiz_title2;\n  //   return (\n  //     <CellMeasurer\n  //       key={key}\n  //       cache={this.cache}\n  //       parent={parent}\n  //       columnIndex={0}\n  //       rowIndex={index}\n  //     >\n  //       <ListItem button key={index} style={style}>\n  //         <ListItemText primary={title} edge='start' aria-label={title} />\n  //         <ListItemSecondaryAction>\n  //           {!isQuestionList && (\n  //             <React.Fragment>\n  //               <Tooltip title='Configurer le quiz'>\n  //                 <IconButton\n  //                   onClick={() =>\n  //                     this.props.handleClick(data[index], isQuestionList)\n  //                   }\n  //                 >\n  //                   <SettingsIcon />\n  //                 </IconButton>\n  //               </Tooltip>\n  //               <Tooltip title='Prévisualiser'>\n  //                 <Link href={this.getLink(data[index])} target='_blank'>\n  //                   {/* TODO PERFORMANCE, those are render every time, can be heavy! */}\n  //                   <IconButton edge='start' aria-label='Prévisualiser'>\n  //                     <VisibilityIcon />\n  //                   </IconButton>\n  //                 </Link>\n  //               </Tooltip>\n  //               <Tooltip title='Télécharger le paquet SCORM'>\n  //                 <Link\n  //                   href={this.downloadSCORMPackage(data[index])}\n  //                   target='_blank'\n  //                 >\n  //                   <IconButton\n  //                     edge='start'\n  //                     aria-label='Télécharger le paquet SCORM'\n  //                   >\n  //                     <GetAppIcon />\n  //                   </IconButton>\n  //                 </Link>\n  //               </Tooltip>\n  //             </React.Fragment>\n  //           )}\n\n  //           {isQuestionList && (\n  //             <React.Fragment>\n  //               <Tooltip title='Éditer la source de questions'>\n  //                 <IconButton\n  //                   onClick={() =>\n  //                     this.props.handleClick(data[index], isQuestionList)\n  //                   }\n  //                   edge='start'\n  //                   aria-label='Éditer la source de questions'\n  //                 >\n  //                   <EditIcon />\n  //                 </IconButton>\n  //               </Tooltip>\n  //               {/* <Tooltip title='Export XLSX'>\n  //                         <IconButton\n  //                           edge='start'\n  //                           aria-label='Export XLSX'\n  //                           onClick={() => console.log(data[index])}\n  //                         >\n  //                           <ArrowDownwardIcon />\n  //                         </IconButton>\n  //                       </Tooltip> */}\n  //               {/*\n  //                       <Tooltip title='Import XLSX'>\n  //                         <IconButton edge='start' aria-label='Import XLSX'>\n  //                           <ArrowUpwardIcon />\n  //                         </IconButton>\n  //                       </Tooltip>\n  //                       <input\n  //                         type='file'\n  //                         accept='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n  //                         onChange={e => this.importXLSX(e)} //+data(actualQuestionsSources in Accueil)\n  //                       /> */}\n  //             </React.Fragment>\n  //           )}\n  //           <Tooltip\n  //             title={\n  //               isQuestionList\n  //                 ? 'Supprimer la source de questions'\n  //                 : 'Supprimer le quiz'\n  //             }\n  //           >\n  //             <IconButton\n  //               edge='start'\n  //               aria-label={\n  //                 isQuestionList\n  //                   ? 'Supprimer la source de questions'\n  //                   : 'Supprimer le quiz'\n  //               }\n  //               onClick={() =>\n  //                 isQuestionList\n  //                   ? this.switchOpenDelete(\n  //                       'questionSource',\n  //                       data[index].questions_id\n  //                     )\n  //                   : this.switchOpenDelete('quiz', data[index].config.quiz_id)\n  //               }\n  //             >\n  //               <DeleteIcon />\n  //             </IconButton>\n  //           </Tooltip>\n  //         </ListItemSecondaryAction>\n  //       </ListItem>\n  //     </CellMeasurer>\n  //   );\n  // };\n  // cache = new CellMeasurerCache({\n  //   fixedWidth: true,\n  //   defaultHeight: 100\n  // });\n\n  render() {\n    const { isQuestionList } = this.props;\n    return (\n      <React.Fragment>\n        {/* REACT VIRTUALIZED */}\n        {/* <AutoSizer>\n          {({ height, width }) => {\n            return (\n              <List\n                rowCount={this.props.data.length}\n                width={width}\n                height={height}\n                deferredMeasurementCache={this.cache}\n                rowHeight={this.cache.rowHeight}\n                rowRenderer={this.rowRenderer}\n                overscanRowCount={4}\n              />\n            );\n          }}\n        </AutoSizer> */}\n\n        <List\n          component='nav'\n          aria-label={\n            isQuestionList ? 'Liste des sources de questions' : 'Liste des quiz'\n          }\n        >\n          {this.props.data &&\n            this.props.data.map((data, index) => {\n              const title = isQuestionList\n                ? data.questions_name\n                : data.config.quiz_title2\n                ? data.config.quiz_title + ' // ' + data.config.quiz_title2\n                : data.config.quiz_title;\n\n              return (\n                <ListItem button key={index}>\n                  <ListItemText\n                    primary={title}\n                    edge='start'\n                    aria-label={title}\n                  />\n                  <ListItemSecondaryAction>\n                    {!isQuestionList && (\n                      <React.Fragment>\n                        <Tooltip title='Configurer le quiz'>\n                          <IconButton\n                            onClick={() =>\n                              this.props.handleClick(data, isQuestionList)\n                            }\n                          >\n                            <SettingsIcon />\n                          </IconButton>\n                        </Tooltip>\n                        <Tooltip title='Prévisualiser'>\n                          <Link href={this.getLink(data)} target='_blank'>\n                            {/* // TODO PERFORMANCE, those are render every time, can be heavy! */}\n                            <IconButton edge='start' aria-label='Prévisualiser'>\n                              <VisibilityIcon />\n                            </IconButton>\n                          </Link>\n                        </Tooltip>\n                        <Tooltip title='Télécharger le paquet SCORM'>\n                          <Link\n                            href={this.downloadSCORMPackage(data)}\n                            target='_blank'\n                          >\n                            <IconButton\n                              edge='start'\n                              aria-label='Télécharger le paquet SCORM'\n                            >\n                              <GetAppIcon />\n                            </IconButton>\n                          </Link>\n                        </Tooltip>\n                      </React.Fragment>\n                    )}\n\n                    {isQuestionList && (\n                      <React.Fragment>\n                        <Tooltip title='Éditer la source de questions'>\n                          <IconButton\n                            onClick={() =>\n                              this.props.handleClick(data, isQuestionList)\n                            }\n                            edge='start'\n                            aria-label='Éditer la source de questions'\n                          >\n                            <EditIcon />\n                          </IconButton>\n                        </Tooltip>\n                      </React.Fragment>\n                    )}\n                    <Tooltip\n                      title={\n                        isQuestionList\n                          ? 'Supprimer la source de questions'\n                          : 'Supprimer le quiz'\n                      }\n                    >\n                      <IconButton\n                        edge='start'\n                        aria-label={\n                          isQuestionList\n                            ? 'Supprimer la source de questions'\n                            : 'Supprimer le quiz'\n                        }\n                        onClick={() =>\n                          isQuestionList\n                            ? this.switchOpenDelete(\n                                'questionSource',\n                                data.questions_id\n                              )\n                            : this.switchOpenDelete('quiz', data.config.quiz_id)\n                        }\n                      >\n                        <DeleteIcon />\n                      </IconButton>\n                    </Tooltip>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              );\n            })}\n        </List>\n\n        <CenterContainer maxWidth='md'>\n          <Tooltip\n            title={\n              isQuestionList\n                ? 'Ajouter une source de questions'\n                : 'Ajouter un quiz'\n            }\n          >\n            <IconButton\n              aria-label={\n                isQuestionList\n                  ? 'Ajouter une source de questions'\n                  : 'Ajouter un quiz'\n              }\n              color='primary'\n              onClick={() =>\n                isQuestionList ? this.addQuestionSource() : this.addQuiz()\n              }\n            >\n              <AddCircle />\n            </IconButton>\n          </Tooltip>\n        </CenterContainer>\n\n        {/*  DELETE QUESTION SOURCE DIALOG */}\n        <Dialog\n          open={this.state.openListItemDelete}\n          onClose={() =>\n            this.switchOpenDelete(isQuestionList ? 'questionSource' : 'quiz')\n          }\n          aria-labelledby='alert-dialog-title'\n        >\n          <DialogTitle id='alert-dialog-title'>\n            {isQuestionList\n              ? 'Supprimer la source de données ?'\n              : 'Supprimer le quiz ?'}\n          </DialogTitle>\n          <DialogActions>\n            <Button\n              onClick={() =>\n                this.switchOpenDelete(\n                  isQuestionList ? 'questionSource' : 'quiz'\n                )\n              }\n              color='primary'\n            >\n              Annuler\n            </Button>\n            <Button\n              onClick={() =>\n                isQuestionList\n                  ? this.handleItemListDelete('questionSource')\n                  : this.handleItemListDelete('quiz')\n              }\n              color='secondary'\n              autoFocus\n            >\n              Supprimer\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\n\nimport { db } from '../components/Firebase/firebase';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Typography from '@material-ui/core/Typography';\nimport { styled } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nimport SaveIcon from '@material-ui/icons/Save';\n\nconst ModalContainer = styled(Container)({\n  backgroundColor: 'white',\n  minHeight: '500px',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  position: 'fixed',\n  maxWidth: '90%',\n  paddingRight: '90px',\n  //\n  overflowY: 'scroll',\n  overflowX: 'visible',\n  height: '88%'\n});\n\nconst MarginTopGrid = styled(Grid)({\n  marginTop: 16\n});\n\nconst WithMarginTypography = styled(Typography)({\n  marginTop: 16\n});\n\nconst FixedHeightGrid = styled(Grid)({\n  height: 70,\n  position: 'relative'\n});\n\nconst FixedGrid = styled(Grid)({\n  marginTop: 12,\n  height: 70,\n  position: 'relative'\n});\n\nconst BackgroundContainer = styled(Container)({\n  margin: '20px 0',\n  paddingTop: '20px',\n  paddingBottom: '30px',\n  backgroundColor: 'rgba(243, 144, 0, 0.1)',\n  maxWidth: 'none'\n});\n\nconst StyledWidthFormControl = styled(FormControl)({\n  width: '830px'\n});\n\nconst StyledFormControlLabel = styled(FormControlLabel)({\n  bottom: 0, //12px\n  position: 'absolute'\n});\n\nconst SaveButton = styled(Button)({\n  position: 'sticky',\n  bottom: '47%',\n  left: '100%',\n  //transform: 'translate(886px, 0px)',\n  transform: 'translate(85px, 0px)',\n\n  height: '80px',\n  width: '80px',\n  borderRadius: '50%'\n});\n\nexport default class QuizConfigModal extends React.Component {\n  state = {\n    SubLines: [],\n    quiz_id: 0,\n    passScore: 0,\n    quiz_time: 0,\n    setShuffle: false,\n    quiz_title: '',\n    quiz_title2: '',\n    pauseButton: false,\n    chronoButton: false,\n    questionsSetId: 0,\n    shuffledAnswers: false,\n    showResultConfig: false,\n    quiz_n_questions: 0,\n    // quiz_n_questionsMax: 0,\n    answers_file_name: '',\n    question_file_name: '',\n    selectedQuestionSet: {}\n  };\n\n  setQuestionSet = () => {\n    db.collection('questions')\n      .where('questions_id', '==', this.state.questionsSetId)\n      .get()\n      .then(querySnapshot => {\n        querySnapshot.forEach(question => {\n          this.setState({ selectedQuestionSet: question.data() });\n        });\n      });\n  };\n\n  componentDidMount = () => {\n    const quiz = this.props.quiz.config;\n    this.setState(\n      {\n        quiz_id: quiz.quiz_id,\n        SubLines: quiz.SubLines,\n        passScore: quiz.passScore,\n        quiz_time: quiz.quiz_time,\n        setShuffle: quiz.setShuffle,\n        quiz_title: quiz.quiz_title,\n        quiz_title2: quiz.quiz_title2,\n        pauseButton: quiz.pauseButton,\n        chronoButton: quiz.chronoButton,\n        questionsSetId: quiz.questionsSetId,\n        shuffledAnswers: quiz.shuffledAnswers,\n        quiz_n_questions: quiz.quiz_n_questions,\n        showResultConfig: quiz.showResultConfig,\n        answers_file_name: quiz.answers_file_name,\n        question_file_name: quiz.question_file_name\n        //quiz_n_questionsMax: quiz.quiz_n_questionsMax\n      },\n      this.setQuestionSet\n    );\n  };\n\n  onTextChange(value, index) {\n    const SubLinesStep = [...this.state.SubLines];\n    SubLinesStep[index] = value;\n    this.setState({ SubLines: SubLinesStep });\n  }\n\n  onCheckBoxChange(type) {\n    switch (type) {\n      case 'setShuffle':\n        this.setState({ setShuffle: !this.state.setShuffle });\n        break;\n      case 'chronoButton':\n        this.setState({ chronoButton: !this.state.chronoButton });\n        break;\n      case 'pauseButton':\n        this.setState({ pauseButton: !this.state.pauseButton });\n        break;\n      case 'showResultConfig':\n        this.setState({ showResultConfig: !this.state.showResultConfig });\n        break;\n      case 'shuffledAnswers':\n        this.setState({ shuffledAnswers: !this.state.shuffledAnswers });\n        break;\n      default:\n        return;\n    }\n  }\n\n  onValueChange(value, type) {\n    switch (type) {\n      case 'quiz_time':\n        this.setState({ quiz_time: value });\n        break;\n      // case 'quiz_n_questionsMax':\n      //   this.setState({ quiz_n_questionsMax: value });\n      //   break;\n      case 'quiz_n_questions':\n        this.setState({ quiz_n_questions: value });\n        break;\n      case 'passScore':\n        this.setState({ passScore: value });\n        break;\n      default:\n        return;\n    }\n  }\n\n  handleSaveConfig = () => {\n    const quiz = this.props.quiz.config;\n\n    db.collection('quiz')\n      .doc(quiz.quiz_id.toString())\n      .get()\n      .then(async () => {\n        // peupler configPre et configPost !!-> change selon quiz_id (attention méthode à revoir à terme)\n        //if pre quiz\n        if (quiz.quiz_id.toString().length === 1 || 2) {\n          await db\n            .collection('quiz')\n            .doc(quiz.quiz_id.toString())\n            .set({\n              configPre: {\n                quiz_id: this.state.quiz_id,\n                SubLines: this.state.SubLines,\n                passScore: this.state.passScore,\n                quiz_time: this.state.quiz_time,\n                setShuffle: this.state.setShuffle,\n                quiz_title: this.state.quiz_title,\n                quiz_title2: this.state.quiz_title2,\n                pauseButton: this.state.pauseButton,\n                chronoButton: this.state.chronoButton,\n                showResultConfig: this.state.showResultConfig,\n                quiz_n_questions: this.state.quiz_n_questions,\n                answers_file_name: this.state.answers_file_name,\n                question_file_name: this.state.question_file_name\n                //quiz_n_questionsMax: this.state.quiz_n_questionsMax\n              },\n              config: {\n                quiz_id: this.state.quiz_id,\n                SubLines: this.state.SubLines,\n                passScore: this.state.passScore,\n                quiz_time: this.state.quiz_time,\n                setShuffle: this.state.setShuffle,\n                quiz_title: this.state.quiz_title,\n                quiz_title2: this.state.quiz_title2,\n                pauseButton: this.state.pauseButton,\n                chronoButton: this.state.chronoButton,\n                showResultConfig: this.state.showResultConfig,\n                quiz_n_questions: this.state.quiz_n_questions,\n                answers_file_name: this.state.answers_file_name,\n                question_file_name: this.state.question_file_name,\n                //quiz_n_questionsMax: this.state.quiz_n_questionsMax,\n\n                shuffledAnswers: this.state.shuffledAnswers,\n                questionsSetId: this.state.questionsSetId\n              },\n              configPost: this.props.quiz.configPost || this.props.quiz.config\n            })\n            .then(function() {\n              //console.log('Document successfully written!');\n            })\n            .catch(function(error) {\n              //console.error('Error writing document: ', error);\n              return;\n            });\n        } //if post quiz\n        else if (quiz.quiz_id.toString().length === 3) {\n          await db\n            .collection('quiz')\n            .doc(quiz.quiz_id.toString())\n            .set({\n              configPost: {\n                quiz_id: this.state.quiz_id,\n                SubLines: this.state.SubLines,\n                passScore: this.state.passScore,\n                quiz_time: this.state.quiz_time,\n                setShuffle: this.state.setShuffle,\n                quiz_title: this.state.quiz_title,\n                quiz_title2: this.state.quiz_title2,\n                pauseButton: this.state.pauseButton,\n                chronoButton: this.state.chronoButton,\n                showResultConfig: this.state.showResultConfig,\n                quiz_n_questions: this.state.quiz_n_questions,\n                answers_file_name: this.state.answers_file_name,\n                question_file_name: this.state.question_file_name\n                //quiz_n_questionsMax: this.state.quiz_n_questionsMax\n              },\n              config: {\n                quiz_id: this.state.quiz_id,\n                SubLines: this.state.SubLines,\n                passScore: this.state.passScore,\n                quiz_time: this.state.quiz_time,\n                setShuffle: this.state.setShuffle,\n                quiz_title: this.state.quiz_title,\n                quiz_title2: this.state.quiz_title2,\n                pauseButton: this.state.pauseButton,\n                chronoButton: this.state.chronoButton,\n                showResultConfig: this.state.showResultConfig,\n                quiz_n_questions: this.state.quiz_n_questions,\n                answers_file_name: this.state.answers_file_name,\n                question_file_name: this.state.question_file_name,\n                //quiz_n_questionsMax: this.state.quiz_n_questionsMax,\n\n                shuffledAnswers: this.state.shuffledAnswers,\n                questionsSetId: this.state.questionsSetId\n              },\n              configPre: this.props.quiz.configPre || this.props.quiz.config\n            })\n            .then(function() {\n              //console.log('Document successfully written!');\n            })\n            .catch(function(error) {\n              //console.error('Error writing document: ', error);\n              return;\n            });\n        }\n        this.props.switchDataSend();\n        this.props.handleCloseModal('config');\n      });\n  };\n\n  render() {\n    const {\n      SubLines,\n      quiz_time,\n      passScore,\n      setShuffle,\n      quiz_title,\n      quiz_title2,\n      pauseButton,\n      chronoButton,\n      questionsSetId,\n      shuffledAnswers,\n      showResultConfig,\n      quiz_n_questions,\n      //quiz_n_questionsMax,\n      selectedQuestionSet\n    } = this.state;\n\n    return (\n      <React.Fragment>\n        <ModalContainer>\n          <BackgroundContainer>\n            <TextField\n              id='quiz-title'\n              label='Titre du Quiz'\n              value={quiz_title}\n              onChange={e => this.setState({ quiz_title: e.target.value })}\n              margin='normal'\n              fullWidth={true}\n            />\n            <TextField\n              id='quiz-title2'\n              label='Sous-titre du Quiz'\n              value={quiz_title2}\n              onChange={e => this.setState({ quiz_title2: e.target.value })}\n              margin='normal'\n              fullWidth={true}\n            />\n            {SubLines && (\n              <WithMarginTypography\n                variant='caption'\n                color='textSecondary'\n                display='block'\n              >\n                Texte d'introduction\n              </WithMarginTypography>\n            )}\n            {SubLines &&\n              SubLines.map((line, index) => {\n                return (\n                  <TextField\n                    key={index}\n                    id='SubLines'\n                    multiline\n                    value={line}\n                    onChange={e => this.onTextChange(e.target.value, index)}\n                    margin='none'\n                    fullWidth={true}\n                  />\n                );\n              })}\n\n            <MarginTopGrid container spacing={3}>\n              <FixedHeightGrid item xs={4}>\n                <StyledFormControlLabel\n                  control={<Checkbox color='primary' />}\n                  label='Affichage aléatoire des questions'\n                  labelPlacement='start'\n                  checked={setShuffle}\n                  onChange={() => this.onCheckBoxChange('setShuffle')}\n                />\n              </FixedHeightGrid>\n            </MarginTopGrid>\n            <Grid container spacing={3}>\n              <FixedHeightGrid item xs={4}>\n                <StyledFormControlLabel\n                  control={<Checkbox color='primary' />}\n                  label='Minuteur'\n                  labelPlacement='start'\n                  checked={chronoButton}\n                  onChange={() => this.onCheckBoxChange('chronoButton')}\n                />\n              </FixedHeightGrid>\n              {chronoButton && (\n                <React.Fragment>\n                  <FixedHeightGrid item xs={4}>\n                    <TextField\n                      fullWidth={true}\n                      id='quiz_time'\n                      label='Durée du quiz (min)'\n                      value={quiz_time}\n                      onChange={e =>\n                        this.onValueChange(\n                          parseInt(e.target.value),\n                          'quiz_time'\n                        )\n                      }\n                      type='number'\n                      margin='none'\n                    />\n                  </FixedHeightGrid>\n                  <FixedHeightGrid item xs={4}>\n                    <StyledFormControlLabel\n                      control={<Checkbox color='primary' />}\n                      label='Pause'\n                      labelPlacement='start'\n                      checked={pauseButton}\n                      onChange={() => this.onCheckBoxChange('pauseButton')}\n                    />\n                  </FixedHeightGrid>\n                </React.Fragment>\n              )}\n            </Grid>\n            <Grid container spacing={3}>\n              <FixedHeightGrid item xs={4}>\n                <StyledFormControlLabel\n                  control={<Checkbox color='primary' />}\n                  label='Masquer les réponses'\n                  labelPlacement='start'\n                  checked={showResultConfig}\n                  onChange={() => this.onCheckBoxChange('showResultConfig')}\n                />\n              </FixedHeightGrid>\n              <FixedHeightGrid item xs={4}>\n                <StyledFormControlLabel\n                  control={<Checkbox color='primary' />}\n                  label='Ordre aléatoire des réponses'\n                  labelPlacement='start'\n                  checked={shuffledAnswers}\n                  onChange={() => this.onCheckBoxChange('shuffledAnswers')}\n                />\n              </FixedHeightGrid>\n            </Grid>\n          </BackgroundContainer>\n\n          <BackgroundContainer>\n            <StyledWidthFormControl>\n              <InputLabel>Sources de données</InputLabel>\n              <Select\n                value={questionsSetId}\n                onChange={e =>\n                  this.setState(\n                    { questionsSetId: e.target.value },\n                    this.setQuestionSet\n                  )\n                }\n                // inputProps={{\n                //   name: 'age',\n                //   id: 'age-simple',\n                // }}\n              >\n                {this.props.questionsAll &&\n                  this.props.questionsAll.map((questions, index) => {\n                    return (\n                      <MenuItem key={index} value={questions.questions_id}>\n                        {questions.questions_name}\n                      </MenuItem>\n                    );\n                  })}\n              </Select>\n            </StyledWidthFormControl>\n            <Grid container spacing={3}>\n              <FixedGrid item xs={4}>\n                <Typography variant='caption' color='textSecondary'>\n                  Nombre de questions total\n                </Typography>\n                <Typography>\n                  {selectedQuestionSet.quizQuestionList &&\n                    selectedQuestionSet.quizQuestionList.length}\n                </Typography>\n              </FixedGrid>\n              <FixedHeightGrid item xs={4}>\n                <TextField\n                  fullWidth={true}\n                  id='quiz-questions'\n                  label='Nombre de questions à afficher'\n                  // error={\n                  //   quiz_n_questions >\n                  //   selectedQuestionSet.quizQuestionList.length\n                  // }\n                  value={quiz_n_questions}\n                  onChange={e =>\n                    this.onValueChange(\n                      parseInt(e.target.value),\n                      'quiz_n_questions'\n                    )\n                  }\n                  type='number'\n                  margin='normal'\n                />\n              </FixedHeightGrid>\n              <FixedHeightGrid item xs={4}>\n                <TextField\n                  fullWidth={true}\n                  id='quiz-questions'\n                  label='Seuil de succès'\n                  // error={passScore > quiz_n_questions}\n                  value={passScore}\n                  onChange={e =>\n                    this.onValueChange(parseInt(e.target.value), 'passScore')\n                  }\n                  type='number'\n                  margin='normal'\n                />\n              </FixedHeightGrid>\n            </Grid>\n          </BackgroundContainer>\n\n          <SaveButton\n            variant='contained'\n            color='secondary'\n            size='large'\n            onClick={this.handleSaveConfig}\n          >\n            <SaveIcon />\n            Save\n          </SaveButton>\n        </ModalContainer>\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\n// import styled from 'styled-components';\nimport Img from 'react-image';\nimport firebase from 'firebase';\nimport FileUploader from 'react-firebase-file-uploader';\nimport { storage } from './Firebase/firebase';\n\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport { Typography } from '@material-ui/core';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormLabel from '@material-ui/core/FormLabel';\n//import { styled } from '@material-ui/core/styles';\nimport * as styledMU from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Popover from '@material-ui/core/Popover';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\n\nconst MaxImage = styledMU.styled(Img)`\n  width: 100%;\n  height: 100%;\n`;\n\nconst BackgroundContainer = styledMU.styled(Container)({\n  //margin: '20px 0',\n  paddingTop: '20px',\n  paddingBottom: '30px',\n  backgroundColor: 'rgba(243, 144, 0, 0.1)',\n  maxWidth: 'none'\n});\n\nconst CenterContentGrid = styledMU.styled(Grid)({\n  width: 168,\n  height: 177,\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  flexDirection: 'column'\n});\n\nconst PaddingTypography = styledMU.styled(Typography)({\n  paddingRight: 10\n});\n\nexport default class EditQuestion extends React.Component {\n  state = {\n    answers: [],\n    feedback: '',\n    possibilities: [],\n    question_id: 0,\n    question_prequel: '',\n    //\n    progressQB: 0, //Question Begin\n    progressQE: 0, //Question End\n    isUploadingQB: false,\n    isUploadingQE: false,\n    openQuestionDelete: false,\n    openReponseDelete: false,\n    //\n    imageURLQB: '',\n    imageURLQE: '',\n    imageNameQB: '',\n    imageNameQE: '',\n    //\n    openPopoverEnonce: false,\n    openPopoverExplication: false\n  };\n\n  componentDidMount = () => {\n    this.setQuestion();\n  };\n\n  static getDerivedStateFromProps = (nextProps, prevState) => {\n    if (nextProps.question.question_id === prevState.question_id) {\n      return null;\n    }\n    const { question } = nextProps;\n    return {\n      answers: question.answers,\n      feedback: question.feedback,\n      possibilities: question.possibilities,\n      question_id: question.question_id,\n      question_prequel: question.question_prequel,\n      imageURLQB: question.imageURLQB,\n      imageURLQE: question.imageURLQE,\n      imageNameQB: question.imageNameQB,\n      imageNameQE: question.imageNameQE\n    };\n  };\n  // ANOTHER METHOD TO UPDATE STATE DEPENDING ON PROPS, BUT getDerivedStateFromProps SEEMS BETTER AT PERFORMANCE\n  // see here https://twitter.com/dan_abramov/status/977181473424932864?lang=fr\n  //   componentDidUpdate = prevProps => {\n  //     //necessary for delete question to work\n  //     if (prevProps.question.question_id !== this.props.question.question_id) {\n  //       this.setQuestion();\n  //     }\n  //   };\n\n  setQuestion = () => {\n    const { question } = this.props;\n    this.setState({\n      answers: question.answers,\n      feedback: question.feedback,\n      possibilities: question.possibilities,\n      question_id: question.question_id,\n      question_prequel: question.question_prequel,\n      imageURLQB: question.imageURLQB,\n      imageURLQE: question.imageURLQE,\n      imageNameQB: question.imageNameQB,\n      imageNameQE: question.imageNameQE\n    });\n  };\n\n  getQuestionObject = () => {\n    return {\n      answers: this.state.answers,\n      feedback: this.state.feedback,\n      possibilities: this.state.possibilities,\n      question_id: this.state.question_id,\n      question_prequel: this.state.question_prequel,\n      imageURLQB: this.state.imageURLQB,\n      imageURLQE: this.state.imageURLQE,\n      imageNameQB: this.state.imageNameQB,\n      imageNameQE: this.state.imageNameQE\n    };\n  };\n\n  //QB\n  handleUploadStartQB = () =>\n    this.setState({ isUploadingQB: true, progressQB: 0 });\n  handleProgressQB = progressQB => this.setState({ progressQB });\n  handleUploadErrorQB = error => {\n    this.setState({ isUploadingQB: false });\n    console.error(error);\n  };\n  handleUploadSuccessQB = filename => {\n    this.setState({\n      imageNameQB: filename,\n      progressQB: 100,\n      isUploadingQB: false\n    });\n    firebase\n      .storage()\n      .ref(this.props.questions_id.toString())\n      .child(filename)\n      .getDownloadURL()\n      .then(url =>\n        this.setState({ imageURLQB: url, progressQB: 0 }, () =>\n          this.props.saveQuestionLocalChange(\n            this.getQuestionObject(),\n            this.props.number\n          )\n        )\n      );\n  };\n\n  //QE\n  handleUploadStartQE = () =>\n    this.setState({ isUploadingQE: true, progressQE: 0 });\n  handleProgressQE = progressQE => this.setState({ progressQE });\n  handleUploadErrorQE = error => {\n    this.setState({ isUploadingQE: false });\n    console.error(error);\n  };\n  handleUploadSuccessQE = filename => {\n    this.setState({\n      imageNameQE: filename,\n      progressQE: 100,\n      isUploadingQE: false\n    });\n    firebase\n      .storage()\n      .ref(this.props.questions_id.toString())\n      .child(filename)\n      .getDownloadURL()\n      .then(url =>\n        this.setState({ imageURLQE: url, progressQE: 0 }, () =>\n          this.props.saveQuestionLocalChange(\n            this.getQuestionObject(),\n            this.props.number\n          )\n        )\n      );\n  };\n\n  onTextChange = (value, index) => {\n    const possibilitiesStep = [...this.state.possibilities];\n    possibilitiesStep[index] = value;\n    this.setState({ possibilities: possibilitiesStep }, () =>\n      this.props.saveQuestionLocalChange(\n        this.getQuestionObject(),\n        this.props.number\n      )\n    );\n  };\n\n  handleChangeCheckbox = (answerIndex, questionIndex) => {\n    const answersStep = [...this.state.answers];\n    answersStep[answerIndex] = !answersStep[answerIndex];\n    this.setState({ answers: answersStep }, () =>\n      this.props.saveQuestionLocalChange(\n        this.getQuestionObject(),\n        this.props.number\n      )\n    );\n  };\n\n  repIndex = 0;\n\n  switchOpenDelete = (type, repIndex) => {\n    if (type === 'question') {\n      this.setState({ openQuestionDelete: !this.state.openQuestionDelete });\n    } else if (type === 'reponse') {\n      this.setState({ openReponseDelete: !this.state.openReponseDelete });\n      this.repIndex = repIndex;\n    }\n  };\n\n  handleQuestionDelete = () => {\n    this.props.handleDeleteQuestion(this.props.number);\n    this.switchOpenDelete('question');\n  };\n\n  handleReponseDelete = () => {\n    const possStep = [...this.state.possibilities];\n    possStep.splice(this.repIndex, 1);\n    this.setState(\n      {\n        possibilities: possStep\n      },\n      this.switchOpenDelete('reponse')\n    );\n  };\n\n  handleClickPopoverEnonce(e) {\n    e.preventDefault();\n    this.setState({\n      openPopoverEnonce: !this.state.openPopoverEnonce,\n      anchorElEnonce: e.currentTarget\n    });\n  }\n  handleClosePopoverEnonce() {\n    this.setState({\n      openPopoverEnonce: false\n    });\n  }\n\n  handleClickPopoverExplication(e) {\n    e.preventDefault();\n    this.setState({\n      openPopoverExplication: !this.state.openPopoverExplication,\n      anchorElExplication: e.currentTarget\n    });\n  }\n  handleClosePopoverExplication() {\n    this.setState({\n      openPopoverExplication: false\n    });\n  }\n\n  render() {\n    return (\n      <BackgroundContainer style={this.props.style}>\n        <Grid container spacing={3}>\n          {/* NUMÉRO QUESTION */}\n          <CenterContentGrid item align='center' xs={2}>\n            <Typography variant='h3'>Q{this.props.number + 1}</Typography>\n            <Tooltip title={'Supprimer la question'}>\n              <IconButton\n                aria-label={'Supprimer la question'}\n                //color='primary'\n                onClick={() => this.switchOpenDelete('question')}\n              >\n                <DeleteIcon />\n              </IconButton>\n            </Tooltip>\n          </CenterContentGrid>\n          {/* ÉNONCÉ */}\n          <Grid item xs={8}>\n            <TextField\n              id='outlined-multiline-flexible'\n              label='Énoncé'\n              multiline\n              //rowsMax='10'\n              value={this.state.question_prequel}\n              onChange={e =>\n                this.setState({ question_prequel: e.target.value }, () =>\n                  this.props.saveQuestionLocalChange(\n                    this.getQuestionObject(),\n                    this.props.number\n                  )\n                )\n              }\n              margin='normal'\n              variant='outlined'\n              fullWidth={true}\n            />\n          </Grid>\n          {/* IMAGE ÉNONCÉ */}\n          <CenterContentGrid item xs={2}>\n            {this.state.imageURLQB && (\n              <React.Fragment>\n                <Button\n                  aria-describedby={\n                    this.state.openPopoverEnonce\n                      ? 'mouse-over-popover-enonce'\n                      : undefined\n                  }\n                  size='small'\n                  variant='contained'\n                  onClick={e => this.handleClickPopoverEnonce(e)}\n                >\n                  Voir l'image importée\n                </Button>\n                <Popover\n                  id='mouse-over-popover-enonce'\n                  open={this.state.openPopoverEnonce}\n                  anchorEl={this.state.anchorElEnonce}\n                  anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right'\n                  }}\n                  transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right'\n                  }}\n                  onClose={() => this.handleClosePopoverEnonce()}\n                  disableRestoreFocus\n                >\n                  <MaxImage\n                    src={this.state.imageURLQB}\n                    alt='Source uploadée'\n                    loader={<CircularProgress />}\n                  />\n                </Popover>\n\n                <Tooltip title={\"Supprimer l'image\"}>\n                  <IconButton\n                    aria-label={\"Supprimer l'image\"}\n                    //color='primary'\n                    onClick={\n                      () => this.setState({ imageURLQB: '', imageNameQB: '' }) //TODO delete in firebase storage too\n                    }\n                  >\n                    <DeleteIcon />\n                  </IconButton>\n                </Tooltip>\n              </React.Fragment>\n            )}\n            <Tooltip title=\"Choisir un fichier image pour l'énoncé\">\n              <FormLabel>\n                <CloudUploadIcon fontSize='large' />\n                <FileUploader\n                  accept='image/*'\n                  name='quiz-begin'\n                  filename={file =>\n                    'sourceID-' +\n                    this.props.questions_id +\n                    '-questionNb-' +\n                    (this.props.number + 1) +\n                    '-QB'\n                  }\n                  storageRef={storage.ref(this.props.questions_id.toString())}\n                  onUploadStart={this.handleUploadStartQB}\n                  onUploadError={this.handleUploadErrorQB}\n                  onUploadSuccess={this.handleUploadSuccessQB}\n                  onProgress={this.handleProgressQB}\n                  hidden\n                />\n              </FormLabel>\n            </Tooltip>\n          </CenterContentGrid>\n        </Grid>\n        {/* LISTE DES RÉPONSES */}\n        {this.state.possibilities.map((rep, index) => {\n          return (\n            <Grid container key={index}>\n              <Grid item xs={1}>\n                <PaddingTypography variant='h6' align='right'>\n                  {index + 1}\n                </PaddingTypography>\n              </Grid>\n              <Grid item xs={9}>\n                <TextField\n                  multiline\n                  value={rep}\n                  onChange={e => this.onTextChange(e.target.value, index)}\n                  margin='none'\n                  fullWidth={true}\n                />\n              </Grid>\n              <Grid item xs={2}>\n                <Checkbox\n                  checked={this.state.answers[index]}\n                  onChange={e =>\n                    this.handleChangeCheckbox(index, this.props.number)\n                  }\n                />\n\n                <Tooltip title={'Supprimer la réponse'}>\n                  <IconButton\n                    aria-label={'Supprimer la réponse'}\n                    //color='primary'\n                    onClick={() => this.switchOpenDelete('reponse', index)}\n                  >\n                    <DeleteIcon />\n                  </IconButton>\n                </Tooltip>\n              </Grid>\n            </Grid>\n          );\n        })}\n        {/* AJOUTER QUESTION */}\n        <Grid container justify='center'>\n          <Tooltip title={'Ajouter une réponse'}>\n            <IconButton\n              aria-label={'Ajouter une réponse'}\n              //color='primary'\n              onClick={() =>\n                this.setState({\n                  possibilities: this.state.possibilities.concat('')\n                })\n              }\n            >\n              <AddCircle />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n\n        <Grid container spacing={3}>\n          <Grid item xs={1} />\n          {/* EXPLICATION */}\n          <Grid item xs={9}>\n            <TextField\n              id='outlined-multiline-flexible'\n              label='Explication'\n              multiline\n              //rowsMax='10'\n              value={this.state.feedback}\n              onChange={e =>\n                this.setState({ feedback: e.target.value }, () =>\n                  this.props.saveQuestionLocalChange(\n                    this.getQuestionObject(),\n                    this.props.number\n                  )\n                )\n              }\n              margin='normal'\n              variant='outlined'\n              fullWidth={true}\n            />\n          </Grid>\n          {/* IMAGE EXPLICATION */}\n          <CenterContentGrid item xs={2}>\n            {this.state.imageURLQE && (\n              <React.Fragment>\n                <Button\n                  aria-describedby={\n                    this.state.openPopoverExplication\n                      ? 'mouse-over-popover-explication'\n                      : undefined\n                  }\n                  size='small'\n                  variant='contained'\n                  onClick={e => this.handleClickPopoverExplication(e)}\n                >\n                  Voir l'image importée\n                </Button>\n                <Popover\n                  id='mouse-over-popover-explication'\n                  open={this.state.openPopoverExplication}\n                  anchorEl={this.state.anchorElExplication}\n                  anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right'\n                  }}\n                  transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right'\n                  }}\n                  onClose={() => this.handleClosePopoverExplication()}\n                  disableRestoreFocus\n                >\n                  <MaxImage\n                    src={this.state.imageURLQE}\n                    alt='Source uploadée'\n                    loader={<CircularProgress />}\n                  />\n                </Popover>\n\n                <Tooltip title={\"Supprimer l'image\"}>\n                  <IconButton\n                    aria-label={\"Supprimer l'image\"}\n                    onClick={\n                      () => this.setState({ imageURLQE: '', imageNameQE: '' }) //TODO delete in firebase storage too\n                    }\n                  >\n                    <DeleteIcon />\n                  </IconButton>\n                </Tooltip>\n              </React.Fragment>\n            )}\n\n            <Tooltip title=\"Choisir un fichier image pour l'explication\">\n              <FormLabel>\n                <CloudUploadIcon fontSize='large' />\n\n                <FileUploader\n                  accept='image/*'\n                  name='quiz-begin'\n                  filename={file =>\n                    'sourceID-' +\n                    this.props.questions_id +\n                    '-questionNb-' +\n                    (this.props.number + 1) +\n                    '-QE'\n                  }\n                  storageRef={storage.ref(this.props.questions_id.toString())}\n                  onUploadStart={this.handleUploadStartQE}\n                  onUploadError={this.handleUploadErrorQE}\n                  onUploadSuccess={this.handleUploadSuccessQE}\n                  onProgress={this.handleProgressQE}\n                  hidden\n                />\n              </FormLabel>\n            </Tooltip>\n          </CenterContentGrid>\n        </Grid>\n\n        {/*  DELETE QUESTION DIALOG */}\n        <Dialog\n          open={this.state.openQuestionDelete}\n          onClose={() => this.switchOpenDelete('question')}\n          aria-labelledby='alert-dialog-title'\n        >\n          <DialogTitle id='alert-dialog-title'>\n            {'Supprimer la question ' + (this.props.number + 1) + ' ?'}\n          </DialogTitle>\n          <DialogActions>\n            <Button\n              onClick={() => this.switchOpenDelete('question')}\n              color='primary'\n            >\n              Annuler\n            </Button>\n            <Button\n              onClick={this.handleQuestionDelete}\n              color='secondary'\n              autoFocus\n            >\n              Supprimer\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n        {/*  DELETE REPONSE DIALOG */}\n        <Dialog\n          open={this.state.openReponseDelete}\n          onClose={() => this.switchOpenDelete('reponse')}\n          aria-labelledby='alert-dialog-title'\n        >\n          <DialogTitle id='alert-dialog-title'>\n            {'Supprimer la réponse ?'}\n          </DialogTitle>\n          <DialogActions>\n            <Button\n              onClick={() => this.switchOpenDelete('reponse')}\n              color='primary'\n            >\n              Annuler\n            </Button>\n            <Button\n              onClick={this.handleReponseDelete}\n              color='secondary'\n              autoFocus\n            >\n              Supprimer\n            </Button>\n          </DialogActions>\n        </Dialog>\n        <hr />\n      </BackgroundContainer>\n    );\n  }\n}\n","import React from 'react';\nimport { db } from './Firebase/firebase';\nimport XLSX from 'xlsx';\nimport _ from 'lodash';\nimport {\n  List,\n  CellMeasurer,\n  CellMeasurerCache,\n  AutoSizer\n} from 'react-virtualized';\n\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport { styled } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nimport SaveIcon from '@material-ui/icons/Save';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport SearchIcon from '@material-ui/icons/Search';\n\nimport EditQuestion from './EditQuestion';\n\nconst ModalContainer = styled(Container)({\n  backgroundColor: 'white',\n  minHeight: '500px',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  position: 'fixed',\n  maxWidth: '90%',\n  //paddingRight: '90px',\n  //\n  overflowY: 'scroll',\n  overflowX: 'visible',\n  height: '95%'\n});\n\nconst SaveButton = styled(Button)({\n  height: '50px',\n  width: '50px',\n  borderRadius: '50%'\n});\n\nconst StyledTextField = styled(TextField)({\n  width: '76%'\n});\n\nconst StyledIconButton = styled(IconButton)({\n  width: '19%',\n  alignSelf: 'flex-end'\n});\n\nconst FlexGrid = styled(Grid)({\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center'\n});\n\nconst FlexGrid2 = styled(Grid)({\n  display: 'flex',\n  alignItems: 'baseline'\n});\n\nconst ButtonsGrid = styled(Grid)({\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center'\n});\n\nexport default class QuestionsConfigModal extends React.Component {\n  state = {\n    answersList: [],\n    questions_id: 0,\n    questions_name: '',\n    quizQuestionList: [],\n    //\n    scrollToIndex: undefined,\n    searchedQuestionNb: ''\n  };\n\n  componentDidMount = () => {\n    const { actualQuestionsSource } = this.props;\n    this.setState({\n      answersList: actualQuestionsSource.answersList,\n      questions_id: actualQuestionsSource.questions_id,\n      questions_name: actualQuestionsSource.questions_name,\n      quizQuestionList: actualQuestionsSource.quizQuestionList\n    });\n  };\n\n  saveQuestionLocalChange = (question, index) => {\n    const quizQuestionListStep = [...this.state.quizQuestionList];\n    quizQuestionListStep[index] = question;\n    this.setState({ quizQuestionList: quizQuestionListStep });\n  };\n\n  onAddNewQuestion = () => {\n    const quizQuestionListStep = [...this.state.quizQuestionList];\n    const newQuestion = {\n      answers: [true, false, false, false],\n      feedback: '',\n      possibilities: ['', '', '', ''],\n      question_id:\n        this.state.quizQuestionList[this.state.quizQuestionList.length - 1]\n          .question_id + 1,\n      question_prequel: '',\n      imageURLQB: '',\n      imageURLQE: '',\n      imageNameQB: '',\n      imageNameQE: ''\n    };\n    quizQuestionListStep.push(newQuestion);\n\n    const answersListStep = Array.from(this.state.answersList);\n    answersListStep.push(1);\n    this.setState(\n      {\n        quizQuestionList: quizQuestionListStep,\n        answersList: answersListStep\n      },\n      () => {\n        this.onScrollToRowChange(this.state.answersList.length);\n      }\n    );\n  };\n\n  handleSaveQuestionsSource = () => {\n    //first peupler answersList\n    const answersListStep = [...this.state.answersList];\n    answersListStep.forEach((item, index) => {\n      answersListStep[index] =\n        this.state.quizQuestionList[index].answers.findIndex(e => e === true) +\n        1;\n    });\n\n    this.setState({ answersList: answersListStep }, () => {\n      // save data to firestore\n      db.collection('questions')\n        .doc(this.state.questions_id.toString())\n        .get()\n        .then(async doc => {\n          await db\n            .collection('questions')\n            .doc(this.state.questions_id.toString())\n            .set({\n              answersList: this.state.answersList,\n              questions_id: this.state.questions_id,\n              questions_name: this.state.questions_name,\n              quizQuestionList: this.state.quizQuestionList\n            })\n            .then(() => console.log('Document successfully written!'))\n            .catch(function(error) {\n              console.error('Error writing document: ', error);\n              return;\n            });\n          this.props.switchDataSend();\n          this.props.handleCloseModal('questions');\n        });\n    });\n  };\n\n  handleDeleteQuestion = index => {\n    const quizQuestionListStep = [...this.state.quizQuestionList];\n    quizQuestionListStep.splice(index, 1);\n    const answersListStep = [...this.state.answersList];\n    answersListStep.splice(index, 1);\n\n    this.setState({\n      quizQuestionList: quizQuestionListStep,\n      answersList: answersListStep\n    });\n  };\n\n  exportXLSX = () => {\n    // Lodash cloneDeep necessary because need to not have shallow copie (several level in this array)\n    const dataToSend = _.cloneDeep(this.state.quizQuestionList);\n    dataToSend.forEach(question => {\n      //transform array to string for XLSX\n      question.answers = question.answers.join();\n      question.possibilities = question.possibilities.join('//');\n    });\n    console.log(this.state.quizQuestionList);\n    console.log(dataToSend);\n    /* make the worksheet */\n    var ws = XLSX.utils.json_to_sheet(dataToSend);\n    /* add to workbook */\n    var wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, 'data');\n    /* generate an XLSX file */\n    XLSX.writeFile(wb, `${this.state.questions_name}.xlsx`);\n  };\n\n  importXLSX = (e, saveOnImportXLSX) => {\n    // import xlsx to json\n    var oFile = e.target.files[0];\n    var reader = new FileReader();\n    reader.onload = function(e) {\n      var data = e.target.result;\n      data = new Uint8Array(data);\n      var workbook = XLSX.read(data, { type: 'array' });\n      //console.log(workbook);\n      var result = {};\n      workbook.SheetNames.forEach(function(sheetName) {\n        var roa = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName]);\n        if (roa.length) result[sheetName] = roa;\n      });\n\n      // see the result, caution: it works after reader event is done.\n      if (reader.readyState) {\n        result.data.forEach(question => {\n          question.answers = question.answers.split(',');\n          //convert string to boolean\n          question.answers = question.answers.map(item => item === 'true');\n          question.possibilities = question.possibilities.split('//');\n        });\n        saveOnImportXLSX(result.data);\n      }\n    };\n    reader.readAsArrayBuffer(oFile);\n  };\n  saveOnImportXLSX = data => {\n    this.setState({ quizQuestionList: data }, () => {\n      this.handleSaveQuestionsSource();\n    });\n  };\n\n  //REACT VIRTUALIZED\n  rowRenderer = ({ key, index, parent, style, isScrolling, isVisible }) => {\n    return (\n      <CellMeasurer\n        key={key}\n        cache={this.cache}\n        parent={parent}\n        columnIndex={0}\n        rowIndex={index}\n      >\n        <EditQuestion\n          style={style}\n          number={index}\n          question={this.state.quizQuestionList[index]}\n          questions_id={this.state.questions_id}\n          handleDeleteQuestion={this.handleDeleteQuestion}\n          saveQuestionLocalChange={this.saveQuestionLocalChange}\n        />\n      </CellMeasurer>\n    );\n  };\n  cache = new CellMeasurerCache({\n    fixedWidth: true,\n    defaultHeight: 600\n  });\n\n  onScrollToRowChange = value => {\n    const rowCount = this.state.quizQuestionList.length;\n    const rowCountIndexBased = parseInt(rowCount, 10) - 1;\n    const questionIndex = parseInt(value) - 1;\n\n    let scrollToIndex = Math.min(rowCountIndexBased, questionIndex);\n\n    if (isNaN(scrollToIndex)) {\n      scrollToIndex = undefined;\n    }\n\n    this.setState({ scrollToIndex });\n  };\n\n  render() {\n    const { questions_name } = this.state;\n    return (\n      <React.Fragment>\n        <ModalContainer>\n          {/* <BackgroundContainer> */}\n          <Grid container spacing={2} justify='space-between'>\n            <FlexGrid2 item xs={5}>\n              <StyledTextField\n                id='questionsSource-title'\n                label='Titre de la source de données'\n                value={questions_name}\n                onChange={e =>\n                  this.setState({ questions_name: e.target.value })\n                }\n                margin='normal'\n                fullWidth={true}\n              />\n              <Typography display='inline'>\n                ({this.state.quizQuestionList.length} questions)\n              </Typography>\n            </FlexGrid2>\n\n            <FlexGrid item xs={3}>\n              <StyledTextField\n                label='Aller à la question n°...'\n                id='question-number'\n                type='number'\n                aria-describedby='Aller à la question n°...'\n                value={this.state.searchedQuestionNb}\n                onChange={e =>\n                  this.setState({ searchedQuestionNb: e.target.value })\n                }\n                margin='normal'\n                error={\n                  this.state.searchedQuestionNb >\n                  this.state.quizQuestionList.length\n                }\n              />\n              <StyledIconButton\n                onClick={e =>\n                  this.onScrollToRowChange(this.state.searchedQuestionNb)\n                }\n              >\n                <SearchIcon />\n              </StyledIconButton>\n            </FlexGrid>\n\n            <FlexGrid item xs={1}>\n              <Tooltip title={'Ajouter une question'}>\n                <IconButton\n                  aria-label={'Ajouter une question'}\n                  //color='primary'\n                  onClick={this.onAddNewQuestion}\n                >\n                  <AddCircle fontSize='large' />\n                </IconButton>\n              </Tooltip>\n            </FlexGrid>\n\n            <ButtonsGrid item xs={1}>\n              <Tooltip title='Export XLSX'>\n                <ArrowDownwardIcon\n                  edge='start'\n                  aria-label='Export XLSX'\n                  onClick={() => this.exportXLSX()}\n                  fontSize='large'\n                />\n              </Tooltip>\n              <input\n                type='file'\n                onChange={e => this.importXLSX(e, this.saveOnImportXLSX)} //+data(actualQuestionsSources in Accueil)\n                accept='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n                style={{ display: 'none' }}\n                id='raised-button-file'\n              />\n              <label htmlFor='raised-button-file'>\n                <Tooltip title='Import XLSX'>\n                  <ArrowUpwardIcon fontSize='large' />\n                </Tooltip>\n              </label>\n            </ButtonsGrid>\n\n            <FlexGrid item xs={1}>\n              <Tooltip title={'Sauvegarder'}>\n                <SaveButton\n                  variant='contained'\n                  color='secondary'\n                  size='large'\n                  onClick={this.handleSaveQuestionsSource}\n                >\n                  <SaveIcon />\n                </SaveButton>\n              </Tooltip>\n            </FlexGrid>\n          </Grid>\n\n          {/* REACT VIRTUALIZED */}\n          <AutoSizer>\n            {({ height, width }) => {\n              return (\n                <List\n                  rowCount={this.state.quizQuestionList.length}\n                  width={width}\n                  height={height}\n                  deferredMeasurementCache={this.cache}\n                  rowHeight={this.cache.rowHeight}\n                  rowRenderer={this.rowRenderer}\n                  overscanRowCount={4}\n                  scrollToIndex={parseInt(this.state.scrollToIndex)}\n                />\n              );\n            }}\n          </AutoSizer>\n          {/* </BackgroundContainer> */}\n        </ModalContainer>\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\n\nimport { db } from '../components/Firebase/firebase';\n\nimport Typography from '@material-ui/core/Typography';\nimport { styled } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Modal from '@material-ui/core/Modal';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport HomeList from '../components/HomeList';\nimport QuizConfigModal from '../components/QuizConfigModal';\nimport QuestionsConfigModal from '../components/QuestionsConfigModal';\n\nconst HeadContainer = styled(Container)({\n  paddingTop: 20\n});\n\nconst ScrollableModal = styled(Modal)({\n  overflow: 'scroll'\n});\n\nclass Accueil extends React.Component {\n  state = {\n    selectedTab: 0,\n    openModalConfig: false,\n    actualQuiz: null,\n    quizAll: [],\n    questionsAll: [],\n    quizDataSend: false,\n    questionsDataSend: false,\n    actualQuestionsSource: null,\n    openQuestionsConfig: false\n  };\n\n  handleChange = (event, newValue) => {\n    this.setState({ selectedTab: newValue });\n  };\n\n  handleClick = (data, isQuestionList) => {\n    if (isQuestionList) {\n      this.setState({ openQuestionsConfig: true, actualQuestionsSource: data });\n    } else if (!isQuestionList) {\n      this.setState({ openModalConfig: true, actualQuiz: data });\n    }\n  };\n\n  handleCloseModal = type => {\n    switch (type) {\n      case 'config':\n        this.setState({ openModalConfig: false });\n        break;\n      case 'questions':\n        this.setState({ openQuestionsConfig: false });\n        break;\n      default:\n        return;\n    }\n    this.updateQuizAll();\n    this.updateQuestionsAll();\n  };\n\n  handleSnackbarClose = (event, type) => {\n    // if (reason === 'clickaway') {\n    //   return;\n    // }\n    this.switchDataSend(type);\n  };\n\n  switchDataSend = type => {\n    switch (type) {\n      case 'quiz':\n        this.setState({ quizDataSend: !this.state.quizDataSend });\n        break;\n      case 'questions':\n        this.setState({ questionsDataSend: !this.state.questionsDataSend });\n        break;\n      default:\n        return;\n    }\n  };\n\n  updateQuizAll = () => {\n    this.setState(\n      { quizAll: [] },\n\n      function() {\n        db.collection('quiz')\n          .orderBy('config.quiz_id', 'asc')\n          .get()\n          .then(querySnapshot => {\n            querySnapshot.forEach(quiz => {\n              const quizAll = this.state.quizAll.concat(quiz.data());\n              this.setState({ quizAll });\n            });\n          });\n      }\n    );\n  };\n\n  updateQuestionsAll = () => {\n    this.setState(\n      { questionsAll: [] },\n\n      function() {\n        db.collection('questions')\n          .orderBy('questions_id', 'asc')\n          .get()\n          .then(querySnapshot => {\n            querySnapshot.forEach(question => {\n              const questionsAll = this.state.questionsAll.concat(\n                question.data()\n              );\n              this.setState({ questionsAll });\n            });\n          });\n      }\n    );\n  };\n\n  componentDidMount() {\n    this.updateQuizAll();\n    this.updateQuestionsAll();\n  }\n\n  render() {\n    const { selectedTab } = this.state;\n    return (\n      <React.Fragment>\n        <HeadContainer maxWidth='md'>\n          <Typography\n            component='h1'\n            variant='h2'\n            align='center'\n            color='textPrimary'\n            gutterBottom\n          >\n            QUIZ MAKER\n          </Typography>\n          <Typography\n            variant='h5'\n            align='center'\n            color='textSecondary'\n            paragraph\n          >\n            Cette interface vous permet d'éditer vos quiz en temps réel.\n          </Typography>\n        </HeadContainer>\n\n        <Tabs\n          value={selectedTab}\n          onChange={this.handleChange}\n          centered={true}\n          textColor='primary'\n        >\n          <Tab label='Quiz' />\n          <Tab label='Sources' />\n        </Tabs>\n\n        {/* QUIZ CONFIG MODAL */}\n        <ScrollableModal\n          aria-labelledby='Quiz Config modal'\n          aria-describedby='Modal pour configurer le quiz'\n          open={this.state.openModalConfig}\n          onClose={() => this.handleCloseModal('config')}\n        >\n          {/* DialogContent here to prevent error of tabIndex (https://stackoverflow.com/questions/53951479/react-material-ui-modal-causing-an-error-with-the-tabindex) */}\n          {/* <DialogContent> */}\n          <QuizConfigModal\n            quiz={this.state.actualQuiz}\n            questionsAll={this.state.questionsAll}\n            handleCloseModal={this.handleCloseModal}\n            switchDataSend={() => this.switchDataSend('quiz')}\n          />\n          {/* </DialogContent> */}\n        </ScrollableModal>\n\n        {/* QUESTIONS MODAL */}\n        <ScrollableModal\n          aria-labelledby='Questions Config modal'\n          aria-describedby='Modal pour configurer les sources de questions'\n          open={this.state.openQuestionsConfig}\n          onClose={() => this.handleCloseModal('questions')}\n        >\n          {/* <DialogContent> */}\n          <QuestionsConfigModal\n            actualQuestionsSource={this.state.actualQuestionsSource}\n            //questionsAll={this.state.questionsAll}\n            handleCloseModal={this.handleCloseModal}\n            switchDataSend={() => this.switchDataSend('questions')}\n          />\n          {/* </DialogContent> */}\n        </ScrollableModal>\n        {selectedTab === 0 && (\n          <Container maxWidth='md'>\n            <HomeList\n              handleClick={this.handleClick}\n              data={this.state.quizAll}\n              //questionsAll={this.state.questionsAll}\n              isQuestionList={false}\n              updateQuizAll={this.updateQuizAll} //todo, in child component\n            />\n          </Container>\n        )}\n        {selectedTab === 1 && (\n          <Container maxWidth='md'>\n            <HomeList\n              handleClick={this.handleClick}\n              data={this.state.questionsAll}\n              //questionsAll={this.state.questionsAll}\n              isQuestionList={true}\n              updateQuestionsAll={this.updateQuestionsAll}\n            />\n          </Container>\n        )}\n\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left'\n          }}\n          open={this.state.quizDataSend}\n          autoHideDuration={4000}\n          onClose={e => this.handleSnackbarClose(e, 'quiz')}\n          ContentProps={{\n            'aria-describedby': 'message-id'\n          }}\n          message={<span id='message-id'>Configuration sauvegardée !</span>}\n          action={[\n            <IconButton\n              key='close'\n              aria-label='Fermer'\n              color='inherit'\n              onClick={e => this.handleSnackbarClose(e, 'quiz')}\n            >\n              <CloseIcon />\n            </IconButton>\n          ]}\n        />\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left'\n          }}\n          open={this.state.questionsDataSend}\n          autoHideDuration={4000}\n          onClose={e => this.handleSnackbarClose(e, 'questions')}\n          ContentProps={{\n            'aria-describedby': 'message-id'\n          }}\n          message={\n            <span id='message-id'>Source de questions sauvegardée !</span>\n          }\n          action={[\n            <IconButton\n              key='close'\n              aria-label='Fermer'\n              color='inherit'\n              onClick={e => this.handleSnackbarClose(e, 'questions')}\n            >\n              <CloseIcon />\n            </IconButton>\n          ]}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Accueil;\n","import React from 'react';\n\nimport Accueil from './containers/Accueil';\nimport './App.css';\n\nfunction App() {\n  return <Accueil />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}