{"version":3,"sources":["components/Firebase/firebase.js","components/HomeList.js","components/QuizConfigModal.js","components/EditQuestion.js","components/QuestionsConfigModal.js","containers/Accueil.js","App.js","serviceWorker.js","index.js"],"names":["app","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","db","firebase","firestore","storage","CenterContainer","styled","Container","textAlign","HomeList","state","openListItemDelete","quizId","questionSourceId","switchOpenDelete","type","id","_this","setState","handleItemListDelete","collection","doc","toString","get","then","exists","console","log","data","catch","error","delete","props","updateQuestionsAll","updateQuizAll","addQuestionSource","length","questions_id","set","answersList","questions_name","quizQuestionList","answers","feedback","possibilities","question_id","question_prequel","imageURLQB","imageURLQE","imageNameQB","imageNameQE","addQuiz","config","quiz_id","SubLines","passScore","quiz_time","setShuffle","quiz_title","quiz_title2","pauseButton","chronoButton","questionsSetId","shuffledAnswers","showResultConfig","quiz_n_questions","quiz_n_questionsMax","answers_file_name","question_file_name","downloadSCORMPackage","quiz","concat","_this2","this","isQuestionList","react_default","a","createElement","Fragment","List","component","aria-label","map","index","title","ListItem","button","key","ListItemText","primary","edge","ListItemSecondaryAction","Tooltip","IconButton","onClick","handleClick","Settings_default","Link","href","getLink","target","Visibility_default","GetApp_default","Edit_default","Delete_default","maxWidth","color","AddCircle_default","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogActions","Button","autoFocus","React","Component","ModalContainer","backgroundColor","minHeight","top","left","transform","position","paddingRight","overflowY","overflowX","height","MarginTopGrid","Grid","marginTop","WithMarginTypography","Typography","FixedHeightGrid","FixedGrid","BackgroundContainer","margin","paddingTop","paddingBottom","StyledWidthFormControl","FormControl","width","StyledFormControlLabel","FormControlLabel","bottom","SaveButton","borderRadius","QuizConfigModal","selectedQuestionSet","setQuestionSet","where","querySnapshot","forEach","question","componentDidMount","handleSaveConfig","configPre","configPost","switchDataSend","handleCloseModal","value","SubLinesStep","Object","toConsumableArray","_this$state","TextField","label","onChange","e","fullWidth","variant","display","line","multiline","onTextChange","container","spacing","item","xs","control","Checkbox","labelPlacement","checked","onCheckBoxChange","onValueChange","parseInt","InputLabel","Select","questionsAll","questions","MenuItem","size","Save_default","MaxImage","styledMU","Img","_templateObject","CenterContentGrid","justifyContent","alignItems","flexDirection","PaddingTypography","EditQuestion","progressQB","progressQE","isUploadingQB","isUploadingQE","openQuestionDelete","openReponseDelete","setQuestion","getQuestionObject","handleUploadStartQB","handleProgressQB","handleUploadErrorQB","handleUploadSuccessQB","filename","ref","child","getDownloadURL","url","saveQuestionLocalChange","number","handleUploadStartQE","handleProgressQE","handleUploadErrorQE","handleUploadSuccessQE","possibilitiesStep","handleChangeCheckbox","answerIndex","questionIndex","answersStep","repIndex","handleQuestionDelete","handleDeleteQuestion","handleReponseDelete","possStep","splice","EditQuestion_BackgroundContainer","style","align","FormLabel","src","alt","loader","CircularProgress","CloudUpload_default","fontSize","lib_default","accept","name","file","storageRef","onUploadStart","onUploadError","onUploadSuccess","onProgress","hidden","rep","justify","getDerivedStateFromProps","nextProps","prevState","ButtonsGrid","QuestionsConfigModal","scrollToIndex","undefined","actualQuestionsSource","quizQuestionListStep","onAddNewQuestion","newQuestion","push","handleSaveQuestionsSource","answersListStep","findIndex","exportXLSX","dataToSend","_","cloneDeep","join","ws","XLSX","utils","json_to_sheet","wb","book_new","book_append_sheet","writeFile","importXLSX","saveOnImportXLSX","oFile","files","reader","FileReader","onload","result","Uint8Array","workbook","read","SheetNames","sheetName","roa","sheet_to_json","Sheets","readyState","split","readAsArrayBuffer","rowRenderer","_ref","parent","isScrolling","isVisible","es","cache","columnIndex","rowIndex","EditQuestion_EditQuestion","CellMeasurerCache","fixedWidth","defaultHeight","QuestionsConfigModal_ModalContainer","ArrowDownward_default","htmlFor","ArrowUpward_default","_ref2","rowCount","deferredMeasurementCache","rowHeight","overscanRowCount","HeadContainer","ScrollableModal","Modal","overflow","Accueil","selectedTab","openModalConfig","actualQuiz","quizAll","quizDataSend","questionsDataSend","openQuestionsConfig","handleChange","event","newValue","handleSnackbarClose","orderBy","_this3","_this4","gutterBottom","paragraph","Tabs","centered","textColor","Tab","aria-describedby","DialogContent","QuizConfigModal_QuizConfigModal","QuestionsConfigModal_QuestionsConfigModal","HomeList_HomeList","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","ContentProps","message","action","Close_default","App","containers_Accueil","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c73c6f2.chunk.js","sourcesContent":["import app from 'firebase/app';\n//import 'firebase/database';\nimport firebase from 'firebase';\n// Required for side-effects\n//import { firestoreExport } from 'node-firestore-import-export';\n//import * as firebase from 'firebase-admin';\n\n// It looks like you're using the development build of the Firebase JS SDK.\n// When deploying Firebase apps to production, it is advisable to only import\n// the individual SDK components you intend to use.\n\n// For the module builds, these are available in the following manner\n// (replace <PACKAGE> with the name of a component - i.e. auth, database, etc):\n\n// CommonJS Modules:\n// const firebase = require('firebase/app');\n// require('firebase/<PACKAGE>');\n\n// ES Modules:\n// import firebase from 'firebase/app';\n// import 'firebase/<PACKAGE>';\n\n// Typescript:\n// import * as firebase from 'firebase/app';\n// import 'firebase/<PACKAGE>';\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n  // apiKey: 'AIzaSyCU_fktx1OgXKsKCG28BsemqKUg4bxNTJw',\n  // authDomain: 'daylight-dev-9d4d5.firebaseapp.com',\n  // databaseURL: 'https://daylight-dev-9d4d5.firebaseio.com',\n  // projectId: 'daylight-dev-9d4d5',\n  // storageBucket: 'daylight-dev-9d4d5.appspot.com',\n  // messagingSenderId: '76653225069'\n};\n\napp.initializeApp(config);\n// const db = app.database();\n\nvar db = firebase.firestore();\nvar storage = firebase.storage();\n\n//const collectionRef = firebase.firestore().collection('collectionA/docB/collectionC');\n\n// function exportJSON() {\n//   firestoreExport().then(data => console.log(data));\n// }\n\nexport { db, storage };\n","import React from 'react';\nimport { db } from './Firebase/firebase';\n// import XLSX from 'xlsx';\n// import _ from 'lodash';\n\nimport Link from '@material-ui/core/Link';\nimport List from '@material-ui/core/List';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport ListItem from '@material-ui/core/ListItem';\nimport Container from '@material-ui/core/Container';\nimport { styled } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\n\nimport EditIcon from '@material-ui/icons/Edit';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\n// import ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\n// import ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\n\nconst CenterContainer = styled(Container)({\n  textAlign: 'center'\n});\n\nexport default class HomeList extends React.Component {\n  state = {\n    openListItemDelete: false\n  };\n\n  getLink(quiz) {\n    if (quiz.config.quiz_id.toString().length === 1) {\n      return (\n        'https://preprod.daylight-back.themoocagency.com/daylightQuizEditor/quizChapter/pre/chap' +\n        `${quiz.config.quiz_id}`\n      );\n    } else if (quiz.config.quiz_id.toString().length === 3) {\n      return (\n        'https://preprod.daylight-back.themoocagency.com/daylightQuizEditor/quizChapter/post/chap' +\n        `${quiz.config.quiz_id.toString()[2]}`\n      );\n    }\n  }\n\n  quizId = 0;\n  questionSourceId = 0;\n\n  switchOpenDelete = (type, id) => {\n    this.setState({ openListItemDelete: !this.state.openListItemDelete });\n    if (id) {\n      switch (type) {\n        case 'questionSource':\n          this.questionSourceId = id;\n          break;\n        case 'quiz':\n          this.quizId = id;\n          break;\n        default:\n          return;\n      }\n    }\n  };\n\n  handleItemListDelete = type => {\n    if (type === 'questionSource') {\n      db.collection('questions')\n        .doc(this.questionSourceId.toString())\n        .get()\n        .then(function(doc) {\n          if (doc.exists) {\n            console.log('Document data:', doc.data());\n          } else {\n            // doc.data() will be undefined in this case\n            console.log('No such document!');\n          }\n        })\n        .catch(function(error) {\n          console.log('Error getting document:', error);\n        });\n\n      db.collection('questions')\n        .doc(this.questionSourceId.toString())\n        .delete()\n        .then(function() {\n          console.log('Document successfully deleted!');\n        })\n        .catch(function(error) {\n          console.error('Error removing document: ', error);\n        });\n      this.switchOpenDelete();\n      this.props.updateQuestionsAll();\n    } else if (type === 'quiz') {\n      db.collection('quiz')\n        .doc(this.quizId.toString())\n        .delete()\n        .then(function() {\n          console.log('Document successfully deleted!');\n        })\n        .catch(function(error) {\n          console.error('Error removing document: ', error);\n        });\n      this.switchOpenDelete();\n      this.props.updateQuizAll();\n    }\n  };\n\n  addQuestionSource = () => {\n    db.collection('questions')\n      .doc(\n        (\n          this.props.data[this.props.data.length - 1].questions_id + 1\n        ).toString()\n      )\n      .set({\n        answersList: [], //TODO peupler\n        questions_id:\n          this.props.data[this.props.data.length - 1].questions_id + 1,\n        questions_name:\n          'Source ' +\n          (this.props.data[this.props.data.length - 1].questions_id + 1),\n        quizQuestionList: [\n          {\n            answers: [false, false, false, false],\n            feedback: '',\n            possibilities: ['', '', '', ''],\n            question_id: 1,\n            question_prequel: '',\n            imageURLQB: '',\n            imageURLQE: '',\n            imageNameQB: '',\n            imageNameQE: ''\n          }\n        ]\n      })\n      .then(function() {\n        console.log('Document successfully written!');\n      })\n      .catch(function(error) {\n        console.error('Error writing document: ', error);\n      });\n    this.props.updateQuestionsAll(); //encore useful si open modal ?\n    //todo open modal correspondant\n  };\n\n  addQuiz = () => {\n    db.collection('quiz')\n      .doc((this.props.data.length + 1).toString())\n      .set({\n        config: {\n          quiz_id: this.props.data.length + 1,\n          SubLines: ['', '', '', ''],\n          passScore: 0,\n          quiz_time: 0,\n          setShuffle: false,\n          quiz_title: 'Titre',\n          quiz_title2: 'Sous-titre',\n          pauseButton: false,\n          chronoButton: false,\n          questionsSetId: 1,\n          shuffledAnswers: false,\n          showResultConfig: false,\n          quiz_n_questions: 0,\n          quiz_n_questionsMax: 0,\n          answers_file_name: '',\n          question_file_name: ''\n        }\n      })\n      .then(function() {\n        console.log('Document successfully written!');\n      })\n      .catch(function(error) {\n        console.error('Error writing document: ', error);\n      });\n    this.props.updateQuizAll(); //encore useful si open modal ?\n    //todo open modal correspondant\n  };\n\n  downloadSCORMPackage = quiz => {\n    if (quiz.config.quiz_id.toString().length === 1) {\n      console.log('scorm 1');\n      return `https://preprod.daylight-back.themoocagency.com/daylightQuizEditor/quizChapter/pre/chap${\n        quiz.config.quiz_id\n      }/chap${quiz.config.quiz_id}.zip`;\n    } else if (quiz.config.quiz_id.toString().length === 3) {\n      console.log('scorm 3');\n      return `https://preprod.daylight-back.themoocagency.com/daylightQuizEditor/quizChapter/post/chap${\n        quiz.config.quiz_id.toString()[2]\n      }chap${quiz.config.quiz_id.toString()[2]}.zip`;\n    }\n  };\n\n  // exportXLSX = data => {\n  //   // Lodash cloneDeep necessary because need to not have shallow copie (several level in this array)\n  //   const dataToSend = _.cloneDeep(data.quizQuestionList);\n  //   dataToSend.forEach(question => {\n  //     //transform array to string for XLSX\n  //     question.answers = question.answers.join();\n  //     question.possibilities = question.possibilities.join('//');\n  //   });\n  //   console.log(data.quizQuestionList);\n  //   console.log(dataToSend);\n  //   /* make the worksheet */\n  //   var ws = XLSX.utils.json_to_sheet(dataToSend);\n  //   /* add to workbook */\n  //   var wb = XLSX.utils.book_new();\n  //   XLSX.utils.book_append_sheet(wb, ws, 'data');\n  //   /* generate an XLSX file */\n  //   XLSX.writeFile(wb, `${data.questions_name}.xlsx`);\n  // };\n\n  // importXLSX = e => {\n  //   // import xlsx to json\n  //   var oFile = e.target.files[0];\n  //   var reader = new FileReader();\n  //   reader.onload = function(e) {\n  //     var data = e.target.result;\n  //     data = new Uint8Array(data);\n  //     var workbook = XLSX.read(data, { type: 'array' });\n  //     //console.log(workbook);\n  //     var result = {};\n  //     workbook.SheetNames.forEach(function(sheetName) {\n  //       var roa = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName]);\n  //       if (roa.length) result[sheetName] = roa;\n  //     });\n\n  //     // see the result, caution: it works after reader event is done.\n  //     if (reader.readyState) {\n  //       console.log(result.data);\n  //       result.data.forEach(question => {\n  //         question.answers = question.answers.split(',');\n  //         //convert string to boolean\n  //         question.answers = question.answers.map(item => item === 'true');\n  //         question.possibilities = question.possibilities.split('//');\n  //       });\n  //       console.log(result.data);\n  //       //here like on save, à ramener ici plutôt que dans modal component? car obligé de send all\n  //     }\n  //   };\n  //   reader.readAsArrayBuffer(oFile);\n  // };\n\n  render() {\n    //console.log(this.props.data);\n    const { isQuestionList } = this.props;\n    return (\n      <React.Fragment>\n        <List\n          component='nav'\n          aria-label={\n            isQuestionList ? 'Liste des sources de questions' : 'Liste des quiz'\n          }\n        >\n          {this.props.data &&\n            this.props.data.map((data, index) => {\n              const title = isQuestionList\n                ? data.questions_name\n                : data.config.quiz_title + ' // ' + data.config.quiz_title2;\n\n              return (\n                <ListItem button key={index}>\n                  <ListItemText\n                    primary={title}\n                    edge='start'\n                    aria-label={title}\n                  />\n                  <ListItemSecondaryAction>\n                    {!isQuestionList && (\n                      <React.Fragment>\n                        <Tooltip title='Configurer le quiz'>\n                          <IconButton\n                            onClick={() =>\n                              this.props.handleClick(data, isQuestionList)\n                            }\n                          >\n                            <SettingsIcon />\n                          </IconButton>\n                        </Tooltip>\n                        <Tooltip title='Prévisualiser'>\n                          <Link href={this.getLink(data)} target='_blank'>\n                            {/* TODO PERFORMANCE, those are render every time, can be heavy! */}\n                            <IconButton edge='start' aria-label='Prévisualiser'>\n                              <VisibilityIcon />\n                            </IconButton>\n                          </Link>\n                        </Tooltip>\n                        <Tooltip title='Télécharger le paquet SCORM'>\n                          <Link\n                            href={this.downloadSCORMPackage(data)}\n                            target='_blank'\n                          >\n                            <IconButton\n                              edge='start'\n                              aria-label='Télécharger le paquet SCORM'\n                            >\n                              <GetAppIcon />\n                            </IconButton>\n                          </Link>\n                        </Tooltip>\n                      </React.Fragment>\n                    )}\n\n                    {isQuestionList && (\n                      <React.Fragment>\n                        <Tooltip title='Éditer la source de questions'>\n                          <IconButton\n                            onClick={() =>\n                              this.props.handleClick(data, isQuestionList)\n                            }\n                            edge='start'\n                            aria-label='Éditer la source de questions'\n                          >\n                            <EditIcon />\n                          </IconButton>\n                        </Tooltip>\n                        {/* <Tooltip title='Export XLSX'>\n                          <IconButton\n                            edge='start'\n                            aria-label='Export XLSX'\n                            onClick={() => console.log(data)}\n                          >\n                            <ArrowDownwardIcon />\n                          </IconButton>\n                        </Tooltip> */}\n                        {/* \n                        <Tooltip title='Import XLSX'>\n                          <IconButton edge='start' aria-label='Import XLSX'>\n                            <ArrowUpwardIcon />\n                          </IconButton>\n                        </Tooltip>\n                        <input\n                          type='file'\n                          accept='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n                          onChange={e => this.importXLSX(e)} //+data(actualQuestionsSources in Accueil)\n                        /> */}\n                      </React.Fragment>\n                    )}\n                    <Tooltip\n                      title={\n                        isQuestionList\n                          ? 'Supprimer la source de questions'\n                          : 'Supprimer le quiz'\n                      }\n                    >\n                      <IconButton\n                        edge='start'\n                        aria-label={\n                          isQuestionList\n                            ? 'Supprimer la source de questions'\n                            : 'Supprimer le quiz'\n                        }\n                        onClick={() =>\n                          isQuestionList\n                            ? this.switchOpenDelete(\n                                'questionSource',\n                                data.questions_id\n                              )\n                            : this.switchOpenDelete('quiz', data.config.quiz_id)\n                        }\n                      >\n                        <DeleteIcon />\n                      </IconButton>\n                    </Tooltip>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              );\n            })}\n        </List>\n        <CenterContainer maxWidth='md'>\n          <Tooltip\n            title={\n              isQuestionList\n                ? 'Ajouter une source de questions'\n                : 'Ajouter un quiz'\n            }\n          >\n            <IconButton\n              aria-label={\n                isQuestionList\n                  ? 'Ajouter une source de questions'\n                  : 'Ajouter un quiz'\n              }\n              color='primary'\n              onClick={() =>\n                isQuestionList ? this.addQuestionSource() : this.addQuiz()\n              }\n            >\n              <AddCircle />\n            </IconButton>\n          </Tooltip>\n        </CenterContainer>\n\n        {/*  DELETE QUESTION SOURCE DIALOG */}\n        <Dialog\n          open={this.state.openListItemDelete}\n          onClose={() =>\n            this.switchOpenDelete(isQuestionList ? 'questionSource' : 'quiz')\n          }\n          aria-labelledby='alert-dialog-title'\n        >\n          <DialogTitle id='alert-dialog-title'>\n            {isQuestionList\n              ? 'Supprimer la source de données ?'\n              : 'Supprimer le quiz ?'}\n          </DialogTitle>\n          <DialogActions>\n            <Button\n              onClick={() =>\n                this.switchOpenDelete(\n                  isQuestionList ? 'questionSource' : 'quiz'\n                )\n              }\n              color='primary'\n            >\n              Annuler\n            </Button>\n            <Button\n              onClick={() =>\n                isQuestionList\n                  ? this.handleItemListDelete('questionSource')\n                  : this.handleItemListDelete('quiz')\n              }\n              color='secondary'\n              autoFocus\n            >\n              Supprimer\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\n\nimport { db } from '../components/Firebase/firebase';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Typography from '@material-ui/core/Typography';\nimport { styled } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nimport SaveIcon from '@material-ui/icons/Save';\n\nconst ModalContainer = styled(Container)({\n  backgroundColor: 'white',\n  minHeight: '500px',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  position: 'fixed',\n  maxWidth: '90%',\n  paddingRight: '90px',\n  //\n  overflowY: 'scroll',\n  overflowX: 'visible',\n  height: '88%'\n});\n\nconst MarginTopGrid = styled(Grid)({\n  marginTop: 16\n});\n\nconst WithMarginTypography = styled(Typography)({\n  marginTop: 16\n});\n\nconst FixedHeightGrid = styled(Grid)({\n  height: 70,\n  position: 'relative'\n});\n\nconst FixedGrid = styled(Grid)({\n  marginTop: 12,\n  height: 70,\n  position: 'relative'\n});\n\nconst BackgroundContainer = styled(Container)({\n  margin: '20px 0',\n  paddingTop: '20px',\n  paddingBottom: '30px',\n  backgroundColor: 'rgba(243, 144, 0, 0.1)',\n  maxWidth: 'none'\n});\n\nconst StyledWidthFormControl = styled(FormControl)({\n  width: '830px'\n});\n\nconst StyledFormControlLabel = styled(FormControlLabel)({\n  bottom: 0, //12px\n  position: 'absolute'\n});\n\nconst SaveButton = styled(Button)({\n  position: 'sticky',\n  bottom: '47%',\n  left: '100%',\n  //transform: 'translate(886px, 0px)',\n  transform: 'translate(85px, 0px)',\n\n  height: '80px',\n  width: '80px',\n  borderRadius: '50%'\n});\n\nexport default class QuizConfigModal extends React.Component {\n  state = {\n    SubLines: [],\n    quiz_id: 0,\n    passScore: 0,\n    quiz_time: 0,\n    setShuffle: false,\n    quiz_title: '',\n    quiz_title2: '',\n    pauseButton: false,\n    chronoButton: false,\n    questionsSetId: 0,\n    shuffledAnswers: false,\n    showResultConfig: false,\n    quiz_n_questions: 0,\n    quiz_n_questionsMax: 0,\n    answers_file_name: '',\n    question_file_name: '',\n    selectedQuestionSet: {}\n  };\n\n  setQuestionSet = () => {\n    db.collection('questions')\n      .where('questions_id', '==', this.state.questionsSetId)\n      .get()\n      .then(querySnapshot => {\n        querySnapshot.forEach(question => {\n          this.setState({ selectedQuestionSet: question.data() });\n        });\n      });\n  };\n\n  componentDidMount = () => {\n    const quiz = this.props.quiz.config;\n    this.setState(\n      {\n        quiz_id: quiz.quiz_id,\n        SubLines: quiz.SubLines,\n        passScore: quiz.passScore,\n        quiz_time: quiz.quiz_time,\n        setShuffle: quiz.setShuffle,\n        quiz_title: quiz.quiz_title,\n        quiz_title2: quiz.quiz_title2,\n        pauseButton: quiz.pauseButton,\n        chronoButton: quiz.chronoButton,\n        questionsSetId: quiz.questionsSetId,\n        shuffledAnswers: quiz.shuffledAnswers,\n        quiz_n_questions: quiz.quiz_n_questions,\n        showResultConfig: quiz.showResultConfig,\n        answers_file_name: quiz.answers_file_name,\n        question_file_name: quiz.question_file_name,\n        quiz_n_questionsMax: quiz.quiz_n_questionsMax\n      },\n      this.setQuestionSet\n\n      // console.log(questionsSetId);\n    );\n  };\n\n  onTextChange(value, index) {\n    const SubLinesStep = [...this.state.SubLines];\n    SubLinesStep[index] = value;\n    this.setState({ SubLines: SubLinesStep });\n  }\n\n  onCheckBoxChange(type) {\n    switch (type) {\n      case 'setShuffle':\n        this.setState({ setShuffle: !this.state.setShuffle });\n        break;\n      case 'chronoButton':\n        this.setState({ chronoButton: !this.state.chronoButton });\n        break;\n      case 'pauseButton':\n        this.setState({ pauseButton: !this.state.pauseButton });\n        break;\n      case 'showResultConfig':\n        this.setState({ showResultConfig: !this.state.showResultConfig });\n        break;\n      case 'shuffledAnswers':\n        this.setState({ shuffledAnswers: !this.state.shuffledAnswers });\n        break;\n      default:\n        return;\n    }\n  }\n\n  onValueChange(value, type) {\n    switch (type) {\n      case 'quiz_time':\n        this.setState({ quiz_time: value });\n        break;\n      case 'quiz_n_questionsMax':\n        this.setState({ quiz_n_questionsMax: value });\n        break;\n      case 'quiz_n_questions':\n        this.setState({ quiz_n_questions: value });\n        break;\n      case 'passScore':\n        this.setState({ passScore: value });\n        break;\n      default:\n        return;\n    }\n  }\n\n  handleSaveConfig = () => {\n    const quiz = this.props.quiz.config;\n\n    //if pre quiz\n    if (quiz.quiz_id.toString().length === 1) {\n      db.collection('quiz')\n        .doc(quiz.quiz_id.toString())\n        .set({\n          configPre: {\n            quiz_id: this.state.quiz_id,\n            SubLines: this.state.SubLines,\n            passScore: this.state.passScore,\n            quiz_time: this.state.quiz_time,\n            setShuffle: this.state.setShuffle,\n            quiz_title: this.state.quiz_title,\n            quiz_title2: this.state.quiz_title2,\n            pauseButton: this.state.pauseButton,\n            chronoButton: this.state.chronoButton,\n            showResultConfig: this.state.showResultConfig,\n            quiz_n_questions: this.state.quiz_n_questions,\n            answers_file_name: this.state.answers_file_name,\n            question_file_name: this.state.question_file_name,\n            quiz_n_questionsMax: this.state.quiz_n_questionsMax\n          },\n          config: {\n            quiz_id: this.state.quiz_id,\n            SubLines: this.state.SubLines,\n            passScore: this.state.passScore,\n            quiz_time: this.state.quiz_time,\n            setShuffle: this.state.setShuffle,\n            quiz_title: this.state.quiz_title,\n            quiz_title2: this.state.quiz_title2,\n            pauseButton: this.state.pauseButton,\n            chronoButton: this.state.chronoButton,\n            showResultConfig: this.state.showResultConfig,\n            quiz_n_questions: this.state.quiz_n_questions,\n            answers_file_name: this.state.answers_file_name,\n            question_file_name: this.state.question_file_name,\n            quiz_n_questionsMax: this.state.quiz_n_questionsMax,\n\n            shuffledAnswers: this.state.shuffledAnswers,\n            questionsSetId: this.state.questionsSetId\n          },\n          configPost: this.props.quiz.configPost || this.props.quiz.config\n        })\n        .then(function() {\n          console.log('Document successfully written!');\n          //this.setState({ dataSend: true });\n          //this.dataSendSwitch();\n        })\n        .catch(function(error) {\n          console.error('Error writing document: ', error);\n          return;\n        });\n    } //if post quiz\n    else if (quiz.quiz_id.toString().length === 3) {\n      db.collection('quiz')\n        .doc(quiz.quiz_id.toString())\n        .set({\n          configPost: {\n            quiz_id: this.state.quiz_id,\n            SubLines: this.state.SubLines,\n            passScore: this.state.passScore,\n            quiz_time: this.state.quiz_time,\n            setShuffle: this.state.setShuffle,\n            quiz_title: this.state.quiz_title,\n            quiz_title2: this.state.quiz_title2,\n            pauseButton: this.state.pauseButton,\n            chronoButton: this.state.chronoButton,\n            showResultConfig: this.state.showResultConfig,\n            quiz_n_questions: this.state.quiz_n_questions,\n            answers_file_name: this.state.answers_file_name,\n            question_file_name: this.state.question_file_name,\n            quiz_n_questionsMax: this.state.quiz_n_questionsMax\n          },\n          config: {\n            quiz_id: this.state.quiz_id,\n            SubLines: this.state.SubLines,\n            passScore: this.state.passScore,\n            quiz_time: this.state.quiz_time,\n            setShuffle: this.state.setShuffle,\n            quiz_title: this.state.quiz_title,\n            quiz_title2: this.state.quiz_title2,\n            pauseButton: this.state.pauseButton,\n            chronoButton: this.state.chronoButton,\n            showResultConfig: this.state.showResultConfig,\n            quiz_n_questions: this.state.quiz_n_questions,\n            answers_file_name: this.state.answers_file_name,\n            question_file_name: this.state.question_file_name,\n            quiz_n_questionsMax: this.state.quiz_n_questionsMax,\n\n            shuffledAnswers: this.state.shuffledAnswers,\n            questionsSetId: this.state.questionsSetId\n          },\n          configPre: this.props.quiz.configPre || this.props.quiz.config\n        })\n        .then(function() {\n          console.log('Document successfully written!');\n          // this.setState({ dataSend: true });\n          //this.dataSendSwitch();\n        })\n        .catch(function(error) {\n          console.error('Error writing document: ', error);\n          return;\n        });\n    }\n\n    this.props.switchDataSend();\n    this.props.handleCloseModal('config');\n  };\n\n  render() {\n    const {\n      SubLines,\n      quiz_time,\n      passScore,\n      setShuffle,\n      quiz_title,\n      quiz_title2,\n      pauseButton,\n      chronoButton,\n      questionsSetId,\n      shuffledAnswers,\n      showResultConfig,\n      quiz_n_questions,\n      //quiz_n_questionsMax,\n      selectedQuestionSet\n    } = this.state;\n\n    return (\n      <React.Fragment>\n        <ModalContainer>\n          <BackgroundContainer>\n            <TextField\n              id='quiz-title'\n              label='Titre du Quiz'\n              value={quiz_title}\n              onChange={e => this.setState({ quiz_title: e.target.value })}\n              margin='normal'\n              fullWidth={true}\n            />\n            <TextField\n              id='quiz-title2'\n              label='Sous-titre du Quiz'\n              value={quiz_title2}\n              onChange={e => this.setState({ quiz_title2: e.target.value })}\n              margin='normal'\n              fullWidth={true}\n            />\n            {SubLines && (\n              <WithMarginTypography\n                variant='caption'\n                color='textSecondary'\n                display='block'\n              >\n                Texte d'introduction\n              </WithMarginTypography>\n            )}\n            {SubLines &&\n              SubLines.map((line, index) => {\n                return (\n                  <TextField\n                    key={index}\n                    id='SubLines'\n                    multiline\n                    value={line}\n                    onChange={e => this.onTextChange(e.target.value, index)}\n                    margin='none'\n                    fullWidth={true}\n                  />\n                );\n              })}\n\n            <MarginTopGrid container spacing={3}>\n              <FixedHeightGrid item xs={4}>\n                <StyledFormControlLabel\n                  control={<Checkbox color='primary' />}\n                  label='Affichage aléatoire des questions'\n                  labelPlacement='start'\n                  checked={setShuffle}\n                  onChange={() => this.onCheckBoxChange('setShuffle')}\n                />\n              </FixedHeightGrid>\n            </MarginTopGrid>\n            <Grid container spacing={3}>\n              <FixedHeightGrid item xs={4}>\n                <StyledFormControlLabel\n                  control={<Checkbox color='primary' />}\n                  label='Minuteur'\n                  labelPlacement='start'\n                  checked={chronoButton}\n                  onChange={() => this.onCheckBoxChange('chronoButton')}\n                />\n              </FixedHeightGrid>\n              {chronoButton && (\n                <React.Fragment>\n                  <FixedHeightGrid item xs={4}>\n                    <TextField\n                      fullWidth={true}\n                      id='quiz_time'\n                      label='Durée du quiz (min)'\n                      value={quiz_time}\n                      onChange={e =>\n                        this.onValueChange(\n                          parseInt(e.target.value),\n                          'quiz_time'\n                        )\n                      }\n                      type='number'\n                      margin='none'\n                    />\n                  </FixedHeightGrid>\n                  <FixedHeightGrid item xs={4}>\n                    <StyledFormControlLabel\n                      control={<Checkbox color='primary' />}\n                      label='Pause'\n                      labelPlacement='start'\n                      checked={pauseButton}\n                      onChange={() => this.onCheckBoxChange('pauseButton')}\n                    />\n                  </FixedHeightGrid>\n                </React.Fragment>\n              )}\n            </Grid>\n            <Grid container spacing={3}>\n              <FixedHeightGrid item xs={4}>\n                <StyledFormControlLabel\n                  control={<Checkbox color='primary' />}\n                  label='Masquer les réponses'\n                  labelPlacement='start'\n                  checked={showResultConfig}\n                  onChange={() => this.onCheckBoxChange('showResultConfig')}\n                />\n              </FixedHeightGrid>\n              <FixedHeightGrid item xs={4}>\n                <StyledFormControlLabel\n                  control={<Checkbox color='primary' />}\n                  label='Ordre aléatoire des réponses'\n                  labelPlacement='start'\n                  checked={shuffledAnswers}\n                  onChange={() => this.onCheckBoxChange('shuffledAnswers')}\n                />\n              </FixedHeightGrid>\n            </Grid>\n          </BackgroundContainer>\n\n          <BackgroundContainer>\n            <StyledWidthFormControl>\n              <InputLabel>Sources de données</InputLabel>\n              <Select\n                value={questionsSetId}\n                // TO DO\n                onChange={e =>\n                  this.setState(\n                    { questionsSetId: e.target.value },\n                    this.setQuestionSet\n                  )\n                }\n                // inputProps={{\n                //   name: 'age',\n                //   id: 'age-simple',\n                // }}\n              >\n                {this.props.questionsAll &&\n                  this.props.questionsAll.map((questions, index) => {\n                    return (\n                      <MenuItem key={index} value={questions.questions_id}>\n                        {questions.questions_name}\n                      </MenuItem>\n                    );\n                  })}\n              </Select>\n            </StyledWidthFormControl>\n            <Grid container spacing={3}>\n              <FixedGrid item xs={4}>\n                <Typography variant='caption' color='textSecondary'>\n                  Nombre de questions total\n                </Typography>\n                <Typography>\n                  {selectedQuestionSet.quizQuestionList &&\n                    selectedQuestionSet.quizQuestionList.length}\n                </Typography>\n              </FixedGrid>\n              {/* {selectedQuestionSet.quizQuestionList && (\n              <FixedHeightGrid item xs={4}>\n                <TextField\n                  fullWidth={true}\n                  id='quiz-questions'\n                  label='Nombre de questions total'\n                  value={selectedQuestionSet.quizQuestionList.length}\n                  // onChange={e =>\n                  //   this.onValueChange(\n                  //     parseInt(e.target.value),\n                  //     'quiz_n_questionsMax'\n                  //   )\n                  // }\n                  type='number'\n                  margin='normal'\n                />\n              </FixedHeightGrid>\n            )} */}\n              <FixedHeightGrid item xs={4}>\n                <TextField\n                  fullWidth={true}\n                  id='quiz-questions'\n                  label='Nombre de questions à afficher'\n                  value={quiz_n_questions}\n                  onChange={e =>\n                    this.onValueChange(\n                      parseInt(e.target.value),\n                      'quiz_n_questions'\n                    )\n                  }\n                  type='number'\n                  margin='normal'\n                />\n              </FixedHeightGrid>\n              <FixedHeightGrid item xs={4}>\n                <TextField\n                  fullWidth={true}\n                  id='quiz-questions'\n                  label='Seuil de succès'\n                  value={passScore}\n                  onChange={e =>\n                    this.onValueChange(parseInt(e.target.value), 'passScore')\n                  }\n                  type='number'\n                  margin='normal'\n                />\n              </FixedHeightGrid>\n            </Grid>\n          </BackgroundContainer>\n\n          <SaveButton\n            variant='contained'\n            color='secondary'\n            size='large'\n            onClick={this.handleSaveConfig}\n          >\n            <SaveIcon />\n            Save\n          </SaveButton>\n        </ModalContainer>\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\n// import styled from 'styled-components';\nimport Img from 'react-image';\nimport firebase from 'firebase';\nimport FileUploader from 'react-firebase-file-uploader';\nimport { storage } from './Firebase/firebase';\n\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport { Typography } from '@material-ui/core';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormLabel from '@material-ui/core/FormLabel';\n//import { styled } from '@material-ui/core/styles';\nimport * as styledMU from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n// import SaveIcon from '@material-ui/icons/Save';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\n\nconst MaxImage = styledMU.styled(Img)`\n  width: 100%;\n  height: 100%;\n`;\n\nconst BackgroundContainer = styledMU.styled(Container)({\n  //margin: '20px 0',\n  paddingTop: '20px',\n  paddingBottom: '30px',\n  backgroundColor: 'rgba(243, 144, 0, 0.1)',\n  maxWidth: 'none'\n});\n\nconst CenterContentGrid = styledMU.styled(Grid)({\n  width: 168,\n  height: 177,\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  flexDirection: 'column'\n});\n\nconst PaddingTypography = styledMU.styled(Typography)({\n  paddingRight: 10\n});\n\nexport default class EditQuestion extends React.Component {\n  state = {\n    answers: [],\n    feedback: '',\n    possibilities: [],\n    question_id: 0,\n    question_prequel: '',\n    //\n    progressQB: 0, //Question Begin\n    progressQE: 0, //Question End\n    isUploadingQB: false,\n    isUploadingQE: false,\n    openQuestionDelete: false,\n    openReponseDelete: false,\n    //\n    imageURLQB: '',\n    imageURLQE: '',\n    imageNameQB: '',\n    imageNameQE: ''\n  };\n\n  componentDidMount = () => {\n    this.setQuestion();\n  };\n\n  static getDerivedStateFromProps = (nextProps, prevState) => {\n    if (nextProps.question.question_id === prevState.question_id) {\n      return null;\n    }\n    const { question } = nextProps;\n    return {\n      answers: question.answers,\n      feedback: question.feedback,\n      possibilities: question.possibilities,\n      question_id: question.question_id,\n      question_prequel: question.question_prequel,\n      imageURLQB: question.imageURLQB,\n      imageURLQE: question.imageURLQE,\n      imageNameQB: question.imageNameQB,\n      imageNameQE: question.imageNameQE\n    };\n  };\n  // ANOTHER METHOD TO UPDATE STATE DEPENDING ON PROPS, BUT getDerivedStateFromProps SEEMS BETTER AT PERFORMANCE\n  // see here https://twitter.com/dan_abramov/status/977181473424932864?lang=fr\n  //   componentDidUpdate = prevProps => {\n  //     //necessary for delete question to work\n  //     if (prevProps.question.question_id !== this.props.question.question_id) {\n  //       this.setQuestion();\n  //     }\n  //   };\n\n  setQuestion = () => {\n    const { question } = this.props;\n    this.setState({\n      answers: question.answers,\n      feedback: question.feedback,\n      possibilities: question.possibilities,\n      question_id: question.question_id,\n      question_prequel: question.question_prequel,\n      imageURLQB: question.imageURLQB,\n      imageURLQE: question.imageURLQE,\n      imageNameQB: question.imageNameQB,\n      imageNameQE: question.imageNameQE\n    });\n  };\n\n  getQuestionObject = () => {\n    return {\n      answers: this.state.answers,\n      feedback: this.state.feedback,\n      possibilities: this.state.possibilities,\n      question_id: this.state.question_id,\n      question_prequel: this.state.question_prequel,\n      imageURLQB: this.state.imageURLQB,\n      imageURLQE: this.state.imageURLQE,\n      imageNameQB: this.state.imageNameQB,\n      imageNameQE: this.state.imageNameQE\n    };\n  };\n\n  //QB\n  handleUploadStartQB = () =>\n    this.setState({ isUploadingQB: true, progressQB: 0 });\n  handleProgressQB = progressQB => this.setState({ progressQB });\n  handleUploadErrorQB = error => {\n    this.setState({ isUploadingQB: false });\n    console.error(error);\n  };\n  handleUploadSuccessQB = filename => {\n    this.setState({\n      imageNameQB: filename,\n      progressQB: 100,\n      isUploadingQB: false\n    });\n    firebase\n      .storage()\n      .ref(this.props.questions_id.toString())\n      .child(filename)\n      .getDownloadURL()\n      .then(url =>\n        this.setState({ imageURLQB: url, progressQB: 0 }, () =>\n          this.props.saveQuestionLocalChange(\n            this.getQuestionObject(),\n            this.props.number\n          )\n        )\n      );\n  };\n\n  //QE\n  handleUploadStartQE = () =>\n    this.setState({ isUploadingQE: true, progressQE: 0 });\n  handleProgressQE = progressQE => this.setState({ progressQE });\n  handleUploadErrorQE = error => {\n    this.setState({ isUploadingQE: false });\n    console.error(error);\n  };\n  handleUploadSuccessQE = filename => {\n    this.setState({\n      imageNameQE: filename,\n      progressQE: 100,\n      isUploadingQE: false\n    });\n    firebase\n      .storage()\n      .ref(this.props.questions_id.toString())\n      .child(filename)\n      .getDownloadURL()\n      .then(url =>\n        this.setState({ imageURLQE: url, progressQE: 0 }, () =>\n          this.props.saveQuestionLocalChange(\n            this.getQuestionObject(),\n            this.props.number\n          )\n        )\n      );\n  };\n\n  onTextChange = (value, index) => {\n    const possibilitiesStep = [...this.state.possibilities];\n    possibilitiesStep[index] = value;\n    this.setState({ possibilities: possibilitiesStep }, () =>\n      this.props.saveQuestionLocalChange(\n        this.getQuestionObject(),\n        this.props.number\n      )\n    );\n  };\n\n  handleChangeCheckbox = (answerIndex, questionIndex) => {\n    const answersStep = [...this.state.answers];\n    answersStep[answerIndex] = !answersStep[answerIndex];\n    this.setState(\n      { answers: answersStep },\n      //   console.log(\n      //     'penser à peupler answer_list à la sauvegarde, ou pas : dès maintenant au niveau state parent only'\n      //   )\n      () =>\n        this.props.saveQuestionLocalChange(\n          this.getQuestionObject(),\n          this.props.number\n        )\n    );\n  };\n\n  repIndex = 0;\n\n  switchOpenDelete = (type, repIndex) => {\n    if (type === 'question') {\n      this.setState({ openQuestionDelete: !this.state.openQuestionDelete });\n    } else if (type === 'reponse') {\n      this.setState({ openReponseDelete: !this.state.openReponseDelete });\n      this.repIndex = repIndex;\n    }\n  };\n\n  handleQuestionDelete = () => {\n    this.props.handleDeleteQuestion(this.props.number);\n    this.switchOpenDelete('question');\n  };\n\n  handleReponseDelete = () => {\n    const possStep = [...this.state.possibilities];\n    possStep.splice(this.repIndex, 1);\n    this.setState(\n      {\n        possibilities: possStep\n      },\n      this.switchOpenDelete('reponse')\n    );\n  };\n\n  render() {\n    return (\n      <BackgroundContainer style={this.props.style}>\n        {this.props.number}\n        <Grid container spacing={3}>\n          {/* NUMÉRO QUESTION */}\n          <CenterContentGrid item align='center' xs={2}>\n            {/* <Grid container>\n              <Grid item xs={12}> */}\n            <Typography variant='h3'>Q{this.props.number + 1}</Typography>\n            <Tooltip title={'Supprimer la question'}>\n              <IconButton\n                aria-label={'Supprimer la question'}\n                //color='primary'\n                onClick={() => this.switchOpenDelete('question')}\n              >\n                <DeleteIcon />\n              </IconButton>\n            </Tooltip>\n            {/* </Grid> */}\n            {/* <Grid item xs={12}>\n                <Tooltip title='Sauvegarder la question'>\n                  <IconButton\n                    color='primary'\n                    //TODO onClick={this.handleSaveConfig}\n                  >\n                    <SaveIcon />\n                  </IconButton>\n                </Tooltip>\n                <Tooltip title='Supprimer la question'>\n                  <IconButton\n                    color='secondary'\n                    //TODO onClick={this.handleSaveConfig}\n                  >\n                    <DeleteIcon />\n                  </IconButton>\n                </Tooltip>\n              </Grid> */}\n            {/* </Grid> */}\n          </CenterContentGrid>\n          {/* ÉNONCÉ */}\n          <Grid item xs={8}>\n            <TextField\n              id='outlined-multiline-flexible'\n              label='Énoncé'\n              multiline\n              //rowsMax='10'\n              value={this.state.question_prequel}\n              onChange={e =>\n                this.setState({ question_prequel: e.target.value }, () =>\n                  this.props.saveQuestionLocalChange(\n                    this.getQuestionObject(),\n                    this.props.number\n                  )\n                )\n              }\n              margin='normal'\n              variant='outlined'\n              fullWidth={true}\n            />\n          </Grid>\n          {/* IMAGE ÉNONCÉ */}\n          <CenterContentGrid item xs={2}>\n            {/* {this.state.isUploadingQB && (\n              <p>Chargement en cours: {this.state.progressQB}</p>\n            )} */}\n\n            <Tooltip title=\"Choisir un fichier image pour l'énoncé\">\n              <FormLabel>\n                {this.state.imageURLQB ? (\n                  <MaxImage\n                    src={this.state.imageURLQB}\n                    alt='Source uploadée'\n                    loader={<CircularProgress />}\n                  />\n                ) : (\n                  <CloudUploadIcon fontSize='large' />\n                )}\n                <FileUploader\n                  accept='image/*'\n                  name='quiz-begin'\n                  filename={file =>\n                    'sourceID-' +\n                    this.props.questions_id +\n                    '-questionNb-' +\n                    (this.props.number + 1) +\n                    '-QB'\n                  }\n                  storageRef={storage.ref(this.props.questions_id.toString())}\n                  onUploadStart={this.handleUploadStartQB}\n                  onUploadError={this.handleUploadErrorQB}\n                  onUploadSuccess={this.handleUploadSuccessQB}\n                  onProgress={this.handleProgressQB}\n                  hidden\n                />\n              </FormLabel>\n            </Tooltip>\n          </CenterContentGrid>\n        </Grid>\n        {/* LISTE DES RÉPONSES */}\n        {this.state.possibilities.map((rep, index) => {\n          return (\n            <Grid container key={index}>\n              <Grid item xs={1}>\n                <PaddingTypography variant='h6' align='right'>\n                  {index + 1}\n                </PaddingTypography>\n              </Grid>\n              <Grid item xs={9}>\n                <TextField\n                  multiline\n                  value={rep}\n                  onChange={e => this.onTextChange(e.target.value, index)}\n                  margin='none'\n                  fullWidth={true}\n                />\n              </Grid>\n              <Grid item xs={2}>\n                <Checkbox\n                  checked={this.state.answers[index]}\n                  onChange={e =>\n                    this.handleChangeCheckbox(index, this.props.number)\n                  }\n                />\n\n                <Tooltip title={'Supprimer la réponse'}>\n                  <IconButton\n                    aria-label={'Supprimer la réponse'}\n                    //color='primary'\n                    onClick={() => this.switchOpenDelete('reponse', index)}\n                  >\n                    <DeleteIcon />\n                  </IconButton>\n                </Tooltip>\n              </Grid>\n            </Grid>\n          );\n        })}\n        {/* AJOUTER QUESTION */}\n        <Grid container justify='center'>\n          <Tooltip title={'Ajouter une réponse'}>\n            <IconButton\n              aria-label={'Ajouter une réponse'}\n              //color='primary'\n              onClick={() =>\n                this.setState({\n                  possibilities: this.state.possibilities.concat('')\n                })\n              }\n            >\n              <AddCircle />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n\n        <Grid container spacing={3}>\n          <Grid item xs={1} />\n          {/* EXPLICATION */}\n          <Grid item xs={9}>\n            <TextField\n              id='outlined-multiline-flexible'\n              label='Explication'\n              multiline\n              //rowsMax='10'\n              value={this.state.feedback}\n              onChange={e =>\n                this.setState({ feedback: e.target.value }, () =>\n                  this.props.saveQuestionLocalChange(\n                    this.getQuestionObject(),\n                    this.props.number\n                  )\n                )\n              }\n              margin='normal'\n              variant='outlined'\n              fullWidth={true}\n            />\n          </Grid>\n          {/* IMAGE EXPLICATION */}\n          <CenterContentGrid item xs={2}>\n            {/* {this.state.isUploadingQE && (\n              <p>Chargement en cours: {this.state.progressQE}</p>\n            )} */}\n\n            <Tooltip title=\"Choisir un fichier image pour l'explication\">\n              <FormLabel>\n                {this.state.imageURLQE ? (\n                  <MaxImage\n                    src={this.state.imageURLQE}\n                    alt='Source uploadée'\n                    loader={<CircularProgress />}\n                  />\n                ) : (\n                  <CloudUploadIcon fontSize='large' />\n                )}\n                <FileUploader\n                  accept='image/*'\n                  name='quiz-begin'\n                  filename={file =>\n                    'sourceID-' +\n                    this.props.questions_id +\n                    '-questionNb-' +\n                    (this.props.number + 1) +\n                    '-QE'\n                  }\n                  storageRef={storage.ref(this.props.questions_id.toString())}\n                  onUploadStart={this.handleUploadStartQE}\n                  onUploadError={this.handleUploadErrorQE}\n                  onUploadSuccess={this.handleUploadSuccessQE}\n                  onProgress={this.handleProgressQE}\n                  hidden\n                />\n              </FormLabel>\n            </Tooltip>\n          </CenterContentGrid>\n        </Grid>\n\n        {/*  DELETE QUESTION DIALOG */}\n        <Dialog\n          open={this.state.openQuestionDelete}\n          onClose={() => this.switchOpenDelete('question')}\n          aria-labelledby='alert-dialog-title'\n        >\n          <DialogTitle id='alert-dialog-title'>\n            {'Supprimer la question ' + (this.props.number + 1) + ' ?'}\n          </DialogTitle>\n          <DialogActions>\n            <Button\n              onClick={() => this.switchOpenDelete('question')}\n              color='primary'\n            >\n              Annuler\n            </Button>\n            <Button\n              onClick={this.handleQuestionDelete}\n              color='secondary'\n              autoFocus\n            >\n              Supprimer\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n        {/*  DELETE REPONSE DIALOG */}\n        <Dialog\n          open={this.state.openReponseDelete}\n          onClose={() => this.switchOpenDelete('reponse')}\n          aria-labelledby='alert-dialog-title'\n        >\n          <DialogTitle id='alert-dialog-title'>\n            {'Supprimer la réponse ?'}\n          </DialogTitle>\n          <DialogActions>\n            <Button\n              onClick={() => this.switchOpenDelete('reponse')}\n              color='primary'\n            >\n              Annuler\n            </Button>\n            <Button\n              onClick={this.handleReponseDelete}\n              color='secondary'\n              autoFocus\n            >\n              Supprimer\n            </Button>\n          </DialogActions>\n        </Dialog>\n        <hr />\n      </BackgroundContainer>\n    );\n  }\n}\n","import React from 'react';\nimport { db } from './Firebase/firebase';\nimport XLSX from 'xlsx';\nimport _ from 'lodash';\nimport {\n  List,\n  CellMeasurer,\n  CellMeasurerCache,\n  AutoSizer\n} from 'react-virtualized';\n\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport { styled } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Grid from '@material-ui/core/Grid';\n//import Input from '@material-ui/core/Input';\n\nimport SaveIcon from '@material-ui/icons/Save';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\n\nimport EditQuestion from './EditQuestion';\n\nconst ModalContainer = styled(Container)({\n  backgroundColor: 'white',\n  minHeight: '500px',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  position: 'fixed',\n  maxWidth: '90%',\n  //paddingRight: '90px',\n  //\n  overflowY: 'scroll',\n  overflowX: 'visible',\n  height: '95%'\n});\n\nconst SaveButton = styled(Button)({\n  // position: 'sticky',\n  // bottom: '47%',\n  // left: '100%',\n  // transform: 'translate(886px, 0px)',\n  // transform: 'translate(85px, 0px)',\n\n  height: '50px',\n  width: '50px',\n  borderRadius: '50%'\n});\n\nconst AddQuestionButton = styled(IconButton)({\n  // position: 'sticky',\n  // bottom: '40%',\n  // left: '100%',\n  //transform: 'translate(886px, 0px)',\n  //transform: 'translate(70px, 0px)'\n});\n\nconst ButtonsGrid = styled(Grid)({\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center'\n});\n\n// const BackgroundContainer = styled(Container)({\n//   margin: '20px 0',\n//   paddingTop: '20px',\n//   paddingBottom: '30px',\n//   backgroundColor: 'rgba(243, 144, 0, 0.1)',\n//   maxWidth: 'none'\n// });\n\nexport default class QuestionsConfigModal extends React.Component {\n  state = {\n    answersList: [],\n    questions_id: 0,\n    questions_name: '',\n    quizQuestionList: [],\n    //\n    scrollToIndex: undefined\n  };\n\n  componentDidMount = () => {\n    const { actualQuestionsSource } = this.props;\n    this.setState({\n      answersList: actualQuestionsSource.answersList,\n      questions_id: actualQuestionsSource.questions_id,\n      questions_name: actualQuestionsSource.questions_name,\n      quizQuestionList: actualQuestionsSource.quizQuestionList\n    });\n  };\n\n  saveQuestionLocalChange = (question, index) => {\n    const quizQuestionListStep = [...this.state.quizQuestionList];\n    quizQuestionListStep[index] = question;\n    // console.log(question);\n    // console.log(quizQuestionListStep);\n    this.setState({ quizQuestionList: quizQuestionListStep });\n  };\n\n  onAddNewQuestion = () => {\n    const quizQuestionListStep = [...this.state.quizQuestionList];\n    const newQuestion = {\n      answers: [false, false, false, false],\n      feedback: '',\n      possibilities: ['', '', '', ''],\n      question_id:\n        this.state.quizQuestionList[this.state.quizQuestionList.length - 1]\n          .question_id + 1,\n      question_prequel: '',\n      imageURLQB: '',\n      imageURLQE: '',\n      imageNameQB: '',\n      imageNameQE: ''\n    };\n    quizQuestionListStep.push(newQuestion);\n    this.setState({ quizQuestionList: quizQuestionListStep });\n  };\n\n  handleSaveQuestionsSource = () => {\n    //first peupler answersList\n    const answersListStep = [...this.state.answersList];\n    answersListStep.forEach((item, index) => {\n      answersListStep[index] =\n        this.state.quizQuestionList[index].answers.findIndex(e => e === true) +\n        1;\n    });\n    this.setState({ answersList: answersListStep }, () => {\n      // save data to firestore\n      db.collection('questions')\n        .doc(this.state.questions_id.toString())\n        .set({\n          answersList: this.state.answersList,\n          questions_id: this.state.questions_id,\n          questions_name: this.state.questions_name,\n          quizQuestionList: this.state.quizQuestionList\n        })\n        .then(function() {\n          console.log('Document successfully written!');\n          // this.setState({ dataSend: true });\n          //this.dataSendSwitch();\n        })\n        .catch(function(error) {\n          console.error('Error writing document: ', error);\n          return;\n        });\n\n      this.props.switchDataSend();\n      this.props.handleCloseModal('questions');\n    });\n  };\n\n  handleDeleteQuestion = index => {\n    const quizQuestionListStep = [...this.state.quizQuestionList];\n    quizQuestionListStep.splice(index, 1);\n    console.log(this.state.quizQuestionList);\n    console.log(quizQuestionListStep);\n    this.setState({ quizQuestionList: quizQuestionListStep }, () => {\n      console.log(this.state.quizQuestionList);\n    });\n  };\n\n  exportXLSX = () => {\n    // Lodash cloneDeep necessary because need to not have shallow copie (several level in this array)\n    const dataToSend = _.cloneDeep(this.state.quizQuestionList);\n    dataToSend.forEach(question => {\n      //transform array to string for XLSX\n      question.answers = question.answers.join();\n      question.possibilities = question.possibilities.join('//');\n    });\n    console.log(this.state.quizQuestionList);\n    console.log(dataToSend);\n    /* make the worksheet */\n    var ws = XLSX.utils.json_to_sheet(dataToSend);\n    /* add to workbook */\n    var wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, 'data');\n    /* generate an XLSX file */\n    XLSX.writeFile(wb, `${this.state.questions_name}.xlsx`);\n  };\n\n  importXLSX = (e, saveOnImportXLSX) => {\n    // import xlsx to json\n    var oFile = e.target.files[0];\n    var reader = new FileReader();\n    reader.onload = function(e) {\n      var data = e.target.result;\n      data = new Uint8Array(data);\n      var workbook = XLSX.read(data, { type: 'array' });\n      //console.log(workbook);\n      var result = {};\n      workbook.SheetNames.forEach(function(sheetName) {\n        var roa = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName]);\n        if (roa.length) result[sheetName] = roa;\n      });\n\n      // see the result, caution: it works after reader event is done.\n      if (reader.readyState) {\n        //console.log(result.data);\n        result.data.forEach(question => {\n          question.answers = question.answers.split(',');\n          //convert string to boolean\n          question.answers = question.answers.map(item => item === 'true');\n          question.possibilities = question.possibilities.split('//');\n        });\n        //console.log(result.data);\n        saveOnImportXLSX(result.data);\n        // not in the scope        this.saveOnImportXLSX(data);\n        //TODO update local state (+ save ?)\n      }\n    };\n    reader.readAsArrayBuffer(oFile);\n    // if (reader.readyState) {\n    //   console.log(reader.result);\n    // }\n  };\n\n  saveOnImportXLSX = data => {\n    console.log(data);\n    console.log(this.state.quizQuestionList);\n    this.setState({ quizQuestionList: data }, () => {\n      console.log('did update state', this.state.quizQuestionList);\n      this.handleSaveQuestionsSource();\n    });\n  };\n\n  //REACT VIRTUALIZED\n  rowRenderer = ({ key, index, parent, style, isScrolling, isVisible }) => {\n    return (\n      <CellMeasurer\n        key={key}\n        cache={this.cache}\n        parent={parent}\n        columnIndex={0}\n        rowIndex={index}\n      >\n        <EditQuestion\n          style={style}\n          number={index}\n          question={this.state.quizQuestionList[index]}\n          questions_id={this.state.questions_id}\n          handleDeleteQuestion={this.handleDeleteQuestion}\n          saveQuestionLocalChange={this.saveQuestionLocalChange}\n        />\n      </CellMeasurer>\n    );\n  };\n  cache = new CellMeasurerCache({\n    fixedWidth: true,\n    defaultHeight: 600\n  });\n\n  // TODO switch input to buttons to navigate in questions, 'cause index ≠ question number\n  // onScrollToRowChange = value => {\n  //   const rowCount = this.state.quizQuestionList.length;\n  //   const rowCountIndexBased = parseInt(rowCount, 10) - 1;\n  //   const questionIndex = value - 1;\n  //   console.log(questionIndex);\n\n  //   let scrollToIndex = Math.min(rowCountIndexBased, questionIndex);\n\n  //   if (isNaN(scrollToIndex)) {\n  //     //typeof scrollToIndex !== 'number'\n  //     scrollToIndex = undefined;\n  //   }\n\n  //   this.setState({ scrollToIndex: value });\n  // };\n\n  render() {\n    const { questions_name } = this.state;\n    return (\n      <React.Fragment>\n        <ModalContainer>\n          {/* <BackgroundContainer> */}\n          <Grid container>\n            <Grid item xs={11}>\n              <TextField\n                id='questionsSource-title'\n                label='Titre de la source de données'\n                value={questions_name}\n                onChange={e =>\n                  this.setState({ questions_name: e.target.value })\n                }\n                margin='normal'\n                fullWidth={true}\n              />\n            </Grid>\n            <ButtonsGrid item xs={1}>\n              <Tooltip title='Export XLSX'>\n                <ArrowDownwardIcon\n                  edge='start'\n                  aria-label='Export XLSX'\n                  onClick={() => this.exportXLSX()}\n                  fontSize='large'\n                />\n              </Tooltip>\n              <input\n                type='file'\n                onChange={e => this.importXLSX(e, this.saveOnImportXLSX)} //+data(actualQuestionsSources in Accueil)\n                accept='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n                style={{ display: 'none' }}\n                id='raised-button-file'\n              />\n              <label htmlFor='raised-button-file'>\n                <Tooltip title='Import XLSX'>\n                  <ArrowUpwardIcon fontSize='large' />\n                </Tooltip>\n              </label>\n            </ButtonsGrid>\n          </Grid>\n          {/* <Grid container justify='center'> */}\n          {/* <Input\n              //id=\"standard-number\"\n              label='Aller à la question numéro...'\n              value={this.state.scrollToIndex}\n              onChange={e => this.onScrollToRowChange(parseInt(e.target.value))}\n              type='number'\n              // className={classes.textField}\n              // InputLabelProps={{\n              //   shrink: true,\n              // }}\n              // margin=\"normal\"\n            /> */}\n          {/* <Grid item xs={2}>\n              <Tooltip title={'Ajouter une question'}>\n                <AddQuestionButton\n                  aria-label={'Ajouter une question'}\n                  //color='primary'\n                  onClick={this.onAddNewQuestion}\n                >\n                  <AddCircle fontSize='large' />\n                </AddQuestionButton>\n              </Tooltip>\n            </Grid>\n            <Grid item xs={2}>\n              <Tooltip title={'Sauvegarder'}>\n                <SaveButton\n                  variant='contained'\n                  color='secondary'\n                  size='large'\n                  onClick={this.handleSaveQuestionsSource}\n                >\n                  <SaveIcon />\n                </SaveButton>\n              </Tooltip>\n            </Grid>\n          </Grid> */}\n          {/* TODO ADD some to some QUESTIONS APPEAR // .slice(0, 10) */}\n          {/* {this.state.quizQuestionList.slice(0, 10).map((question, index) => {\n            return (\n              <EditQuestion\n                key={index}\n                number={index}\n                question={question}\n                questions_id={this.state.questions_id}\n                handleDeleteQuestion={this.handleDeleteQuestion}\n                saveQuestionLocalChange={this.saveQuestionLocalChange}\n              />\n            );\n          })} */}\n          {/* REACT VIRTUALIZED */}\n          <AutoSizer>\n            {({ height, width }) => {\n              return (\n                <List\n                  rowCount={this.state.quizQuestionList.length}\n                  width={width}\n                  height={height}\n                  deferredMeasurementCache={this.cache}\n                  rowHeight={this.cache.rowHeight}\n                  rowRenderer={this.rowRenderer}\n                  overscanRowCount={3}\n                  scrollToIndex={this.state.scrollToIndex}\n                />\n              );\n            }}\n          </AutoSizer>\n          {/* </BackgroundContainer> */}\n        </ModalContainer>\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\n// import { FixedSizeList } from 'react-window';\n// import axios from 'axios';\n\nimport { db } from '../components/Firebase/firebase';\n\nimport Typography from '@material-ui/core/Typography';\nimport { styled } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Modal from '@material-ui/core/Modal';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport DialogContent from '@material-ui/core/DialogContent';\n\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport HomeList from '../components/HomeList';\nimport QuizConfigModal from '../components/QuizConfigModal';\nimport QuestionsConfigModal from '../components/QuestionsConfigModal';\n\nconst HeadContainer = styled(Container)({\n  paddingTop: 20\n});\n\n// const ModalContainer = styled(Container)({\n//   backgroundColor: 'white',\n//   minHeight: '500px',\n//   top: '50%',\n//   left: '50%',\n//   transform: 'translate(-50%, -50%)',\n//   position: 'fixed',\n//   //\n//   overflowY: 'scroll',\n//   overflowX: 'visible',\n//   height: '88%'\n// });\n\nconst ScrollableModal = styled(Modal)({\n  overflow: 'scroll'\n});\n\nclass Accueil extends React.Component {\n  state = {\n    selectedTab: 1, // put back to 0 (quiz)\n    openModalConfig: false,\n    actualQuiz: null,\n    quizAll: [],\n    questionsAll: [],\n    quizDataSend: false,\n    questionsDataSend: false,\n    actualQuestionsSource: null,\n    openQuestionsConfig: false\n  };\n\n  handleChange = (event, newValue) => {\n    this.setState({ selectedTab: newValue });\n  };\n\n  handleClick = (data, isQuestionList) => {\n    if (isQuestionList) {\n      this.setState({ openQuestionsConfig: true, actualQuestionsSource: data });\n    } else if (!isQuestionList) {\n      this.setState({ openModalConfig: true, actualQuiz: data });\n    }\n    // axios\n    //   .post('http://localhost:3001/test', {\n    //     firstName: 'Fred',\n    //     lastName: 'Flintstone'\n    //   })\n    //   .then(function(response) {\n    //     console.log('HERE ' + response);\n    //   })\n    //   .catch(function(error) {\n    //     console.log('HERE ' + error);\n    //   });\n  };\n\n  handleCloseModal = type => {\n    switch (type) {\n      case 'config':\n        this.setState({ openModalConfig: false });\n        break;\n      case 'questions':\n        this.setState({ openQuestionsConfig: false });\n        break;\n      default:\n        return;\n    }\n    this.updateQuizAll();\n    this.updateQuestionsAll();\n  };\n\n  handleSnackbarClose = (event, type) => {\n    // if (reason === 'clickaway') {\n    //   return;\n    // }\n\n    this.switchDataSend(type);\n  };\n\n  switchDataSend = type => {\n    switch (type) {\n      case 'quiz':\n        this.setState({ quizDataSend: !this.state.quizDataSend });\n        break;\n      case 'questions':\n        this.setState({ questionsDataSend: !this.state.questionsDataSend });\n        break;\n      default:\n        return;\n    }\n  };\n\n  updateQuizAll = () => {\n    this.setState(\n      { quizAll: [] },\n\n      function() {\n        db.collection('quiz')\n          .orderBy('config.quiz_id', 'asc')\n          .get()\n          .then(querySnapshot => {\n            querySnapshot.forEach(quiz => {\n              //console.log(quiz.data());\n              const quizAll = this.state.quizAll.concat(quiz.data());\n              this.setState({ quizAll });\n            });\n          });\n      }\n    );\n  };\n\n  updateQuestionsAll = () => {\n    this.setState(\n      { questionsAll: [] },\n\n      function() {\n        db.collection('questions')\n          .get()\n          .then(querySnapshot => {\n            querySnapshot.forEach(question => {\n              const questionsAll = this.state.questionsAll.concat(\n                question.data()\n              );\n              this.setState({ questionsAll });\n            });\n          });\n      }\n    );\n  };\n\n  componentDidMount() {\n    this.updateQuizAll();\n    this.updateQuestionsAll();\n\n    // IN HOME LIST: ADD QUIZ OR SOURCE DE QUESTIONS\n    // db.collection('questions').add({\n    //   });\n\n    //   .then(response => {\n    //     console.log(response);\n    //     response.json();\n    //   })\n    //   .then(data => {\n    //     console.log(data);\n    //     this.setState({ data });\n    //   }, console.log(this.state.data));\n  }\n\n  render() {\n    const { selectedTab } = this.state;\n    //console.log('quizAll :', this.state.quizAll);\n    return (\n      <React.Fragment>\n        <HeadContainer maxWidth='md'>\n          <Typography\n            component='h1'\n            variant='h2'\n            align='center'\n            color='textPrimary'\n            gutterBottom\n          >\n            QUIZ MAKER\n          </Typography>\n          <Typography\n            variant='h5'\n            align='center'\n            color='textSecondary'\n            paragraph\n          >\n            Cette interface vous permet d'éditer vos quiz en temps réel.\n            <br />\n            La page d'édition vous permet de télécharger directement le PACKAGE\n            SCORM généré. <br />\n            Vous pouvez visualiser les différentes modification en cliquant sur\n            le bouton 'voir'.\n          </Typography>\n        </HeadContainer>\n\n        <Tabs\n          value={selectedTab}\n          onChange={this.handleChange}\n          centered={true}\n          textColor='primary'\n        >\n          <Tab label='Quiz' />\n          <Tab label='Sources' />\n        </Tabs>\n\n        {/* QUIZ CONFIG MODAL */}\n        <ScrollableModal\n          aria-labelledby='Quiz Config modal'\n          aria-describedby='Modal pour configurer le quiz'\n          open={this.state.openModalConfig}\n          onClose={() => this.handleCloseModal('config')}\n        >\n          {/* DialogContent here to prevent error of tabIndex (https://stackoverflow.com/questions/53951479/react-material-ui-modal-causing-an-error-with-the-tabindex) */}\n          <DialogContent>\n            <QuizConfigModal\n              quiz={this.state.actualQuiz}\n              questionsAll={this.state.questionsAll}\n              handleCloseModal={this.handleCloseModal}\n              switchDataSend={() => this.switchDataSend('quiz')}\n            />\n          </DialogContent>\n        </ScrollableModal>\n\n        {/* QUESTIONS MODAL */}\n        <ScrollableModal\n          aria-labelledby='Questions Config modal'\n          aria-describedby='Modal pour configurer les sources de questions'\n          open={this.state.openQuestionsConfig}\n          onClose={() => this.handleCloseModal('questions')}\n        >\n          <DialogContent>\n            <QuestionsConfigModal\n              actualQuestionsSource={this.state.actualQuestionsSource}\n              //questionsAll={this.state.questionsAll}\n              handleCloseModal={this.handleCloseModal}\n              switchDataSend={() => this.switchDataSend('questions')}\n            />\n          </DialogContent>\n        </ScrollableModal>\n\n        {/* {value === 0 && (\n          <Container maxWidth='md'>\n            <FixedSizeList\n              height={500}\n              width={1000}\n              itemSize={50}\n              itemCount={this.state.quizTitles.length}\n            >\n              {({ index, style }) => (\n                <ListItem\n                  button\n                  ContainerProps={{ style: style }}\n                  ContainerComponent='div'\n                  key={index}\n                >\n                  <ListItemText\n                    primary={this.state.quizTitles[index]}\n                    edge='end'\n                    aria-label='Configurer le quiz'\n                  />\n                  <ListItemSecondaryAction>\n                    <Tooltip title='Configurer le quiz'>\n                      <IconButton>\n                        <SettingsIcon />\n                      </IconButton>\n                    </Tooltip>\n                    <Tooltip title='Prévisualiser'>\n                      <IconButton edge='end' aria-label='Prévisualiser'>\n                        <VisibilityIcon />\n                      </IconButton>\n                    </Tooltip>\n                    <Tooltip title='Télécharger le paquet SCORM'>\n                      <IconButton\n                        edge='end'\n                        aria-label='Télécharger le paquet SCORM'\n                      >\n                        <GetAppIcon />\n                      </IconButton>\n                    </Tooltip>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              )}\n            </FixedSizeList>\n          </Container>\n        )} */}\n        {selectedTab === 0 && (\n          <Container maxWidth='md'>\n            <HomeList\n              handleClick={this.handleClick}\n              data={this.state.quizAll}\n              //questionsAll={this.state.questionsAll}\n              isQuestionList={false}\n              updateQuizAll={this.updateQuizAll} //todo, in child component\n            />\n          </Container>\n        )}\n        {selectedTab === 1 && (\n          <Container maxWidth='md'>\n            <HomeList\n              handleClick={this.handleClick}\n              data={this.state.questionsAll}\n              //questionsAll={this.state.questionsAll}\n              isQuestionList={true}\n              updateQuestionsAll={this.updateQuestionsAll}\n            />\n          </Container>\n        )}\n\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left'\n          }}\n          open={this.state.quizDataSend}\n          autoHideDuration={4000}\n          onClose={e => this.handleSnackbarClose(e, 'quiz')}\n          ContentProps={{\n            'aria-describedby': 'message-id'\n          }}\n          message={<span id='message-id'>Configuration sauvegardée !</span>}\n          action={[\n            // <Button key=\"undo\" color=\"secondary\" size=\"small\" onClick={handleSnackbarClose}>\n            //   UNDO\n            // </Button>,\n            <IconButton\n              key='close'\n              aria-label='Fermer'\n              color='inherit'\n              onClick={e => this.handleSnackbarClose(e, 'quiz')}\n            >\n              <CloseIcon />\n            </IconButton>\n          ]}\n        />\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left'\n          }}\n          open={this.state.questionsDataSend}\n          autoHideDuration={4000}\n          onClose={e => this.handleSnackbarClose(e, 'questions')}\n          ContentProps={{\n            'aria-describedby': 'message-id'\n          }}\n          message={\n            <span id='message-id'>Source de questions sauvegardée !</span>\n          }\n          action={[\n            // <Button key=\"undo\" color=\"secondary\" size=\"small\" onClick={handleSnackbarClose}>\n            //   UNDO\n            // </Button>,\n            <IconButton\n              key='close'\n              aria-label='Fermer'\n              color='inherit'\n              onClick={e => this.handleSnackbarClose(e, 'questions')}\n            >\n              <CloseIcon />\n            </IconButton>\n          ]}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Accueil;\n","import React from 'react';\n//import { Route, Switch } from 'react-router-dom';\n// import { ThemeProvider } from '@material-ui/styles';\n\nimport Accueil from './containers/Accueil';\n// import Quiz from './containers/Quiz';\n// import Sources from './containers/Sources';\nimport './App.css';\n\n// const theme = {\n//   background: 'red'\n// };\n\nfunction App() {\n  return (\n    <Accueil />\n    // <ThemeProvider theme={theme}>\n    // <Switch>\n    //   <Route exact path='/' component={Accueil} />\n    //   {/* <Route path='/quiz' component={Quiz} />\n    //   <Route path='/sources' component={Sources} /> */}\n    //   {/* when none of the above match, <NoMatch> will be rendered */}\n    //   {/* <Route component={NoMatch} /> */}\n    // </Switch>\n    // </ThemeProvider>\n\n    // <div className='App'>\n    //   <header className='App-header'>\n    //     <img src={logo} className='App-logo' alt='logo' />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className='App-link'\n    //       href='https://reactjs.org'\n    //       target='_blank'\n    //       rel='noopener noreferrer'\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import { BrowserRouter } from 'react-router-dom';\n\nimport './index.css';\nimport App from './App';\n//import Firebase, { FirebaseContext } from './components/Firebase';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  //   <FirebaseContext.Provider value={new Firebase()}>\n  // <BrowserRouter>\n  <App />,\n  //</BrowserRouter>,\n  //   </FirebaseContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}