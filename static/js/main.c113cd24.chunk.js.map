{"version":3,"sources":["components/Firebase/firebase.js","components/HomeList.js","components/QuizConfigModal.js","components/EditQuestion.js","components/QuestionsConfigModal.js","containers/Accueil.js","App.js","serviceWorker.js","index.js"],"names":["config","apiKey","process","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","projectId","storageBucket","app","initializeApp","db","firebase","firestore","storage","CenterContainer","styled","Container","textAlign","HomeList","state","openListItemDelete","quizId","questionSourceId","switchOpenDelete","type","id","_this","setState","handleItemListDelete","collection","doc","toString","get","then","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","delete","catch","error","props","updateQuestionsAll","stop","_x","apply","this","arguments","_ref2","_callee2","_context2","updateQuizAll","_x2","addQuestionSource","data","length","questions_id","set","answersList","questions_name","quizQuestionList","answers","feedback","possibilities","question_id","question_prequel","imageURLQB","imageURLQE","imageNameQB","imageNameQE","console","log","addQuiz","quiz_id","SubLines","passScore","quiz_time","setShuffle","quiz_title","quiz_title2","pauseButton","chronoButton","questionsSetId","shuffledAnswers","showResultConfig","quiz_n_questions","quiz_n_questionsMax","answers_file_name","question_file_name","downloadSCORMPackage","quiz","concat","_this2","isQuestionList","react_default","createElement","Fragment","List","component","aria-label","quizSpinner","questionsSpinner","Grid","container","justify","CircularProgress","map","index","title","ListItem","button","key","ListItemText","primary","edge","ListItemSecondaryAction","Tooltip","IconButton","onClick","handleClick","Settings_default","Link","href","getLink","target","Visibility_default","GetApp_default","Edit_default","Delete_default","maxWidth","color","AddCircle_default","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogActions","Button","autoFocus","React","Component","ModalContainer","backgroundColor","minHeight","top","left","transform","position","paddingRight","overflowY","overflowX","height","MarginTopGrid","marginTop","WithMarginTypography","Typography","FixedHeightGrid","FixedGrid","BackgroundContainer","margin","paddingTop","paddingBottom","StyledWidthFormControl","FormControl","width","StyledFormControlLabel","FormControlLabel","bottom","SaveButton","borderRadius","QuizConfigModal","selectedQuestionSet","setQuestionSet","where","querySnapshot","forEach","question","componentDidMount","handleSaveConfig","configPre","configPost","switchDataSend","handleCloseModal","value","SubLinesStep","toConsumableArray","_this$state","TextField","label","onChange","e","fullWidth","variant","display","line","multiline","onTextChange","spacing","item","xs","control","Checkbox","labelPlacement","checked","onCheckBoxChange","onValueChange","parseInt","InputLabel","Select","questionsAll","questions","MenuItem","size","Save_default","MaxImage","styledMU","Img","_templateObject","CenterContentGrid","justifyContent","alignItems","flexDirection","PaddingTypography","EditQuestion","progressQB","progressQE","isUploadingQB","isUploadingQE","openQuestionDelete","openReponseDelete","openPopoverEnonce","openPopoverExplication","setQuestion","getQuestionObject","handleUploadStartQB","handleProgressQB","handleUploadErrorQB","handleUploadSuccessQB","filename","ref","child","getDownloadURL","url","saveQuestionLocalChange","number","handleUploadStartQE","handleProgressQE","handleUploadErrorQE","handleUploadSuccessQE","possibilitiesStep","handleChangeCheckbox","answerIndex","questionIndex","answersStep","repIndex","handleQuestionDelete","handleDeleteQuestion","handleReponseDelete","possStep","splice","preventDefault","anchorElEnonce","currentTarget","anchorElExplication","EditQuestion_BackgroundContainer","style","align","aria-describedby","undefined","handleClickPopoverEnonce","Popover","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","handleClosePopoverEnonce","disableRestoreFocus","src","alt","loader","FormLabel","CloudUpload_default","fontSize","lib_default","accept","name","file","storageRef","onUploadStart","onUploadError","onUploadSuccess","onProgress","hidden","rep","handleClickPopoverExplication","handleClosePopoverExplication","getDerivedStateFromProps","nextProps","prevState","StyledTextField","StyledIconButton","alignSelf","FlexGrid","FlexGrid2","ButtonsGrid","QuestionsConfigModal","scrollToIndex","searchedQuestionNb","actualQuestionsSource","quizQuestionListStep","onAddNewQuestion","newQuestion","push","answersListStep","Array","from","onScrollToRowChange","handleSaveQuestionsSource","findIndex","exportXLSX","dataToSend","_","cloneDeep","join","ws","XLSX","utils","json_to_sheet","wb","book_new","book_append_sheet","writeFile","importXLSX","saveOnImportXLSX","oFile","files","reader","FileReader","onload","result","Uint8Array","workbook","read","SheetNames","sheetName","roa","sheet_to_json","Sheets","readyState","split","readAsArrayBuffer","rowRenderer","parent","isScrolling","isVisible","es","cache","columnIndex","rowIndex","EditQuestion_EditQuestion","CellMeasurerCache","fixedWidth","defaultHeight","rowCount","rowCountIndexBased","Math","min","isNaN","QuestionsConfigModal_ModalContainer","Search_default","ArrowDownward_default","htmlFor","ArrowUpward_default","QuestionsConfigModal_SaveButton","_ref3","deferredMeasurementCache","rowHeight","overscanRowCount","HeadContainer","ScrollableModal","Modal","overflow","Accueil","selectedTab","openModalConfig","actualQuiz","quizAll","quizDataSend","questionsDataSend","openQuestionsConfig","handleChange","event","newValue","handleSnackbarClose","orderBy","_this3","_this4","gutterBottom","paragraph","Tabs","centered","textColor","Tab","QuizConfigModal_QuizConfigModal","QuestionsConfigModal_QuestionsConfigModal","HomeList_HomeList","Snackbar","autoHideDuration","ContentProps","message","action","Close_default","App","containers_Accueil","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c113cd24.chunk.js","sourcesContent":["import app from 'firebase/app';\n//import 'firebase/database';\nimport firebase from 'firebase';\n// Required for side-effects\n//import { firestoreExport } from 'node-firestore-import-export';\n//import * as firebase from 'firebase-admin';\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  // projectId: process.env.REACT_APP_PROJECT_ID,\n  // storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  projectId: 'daylight-dev2',\n  storageBucket: 'daylight-dev2.appspot.com'\n  // messagingSenderId: '415713015602'\n};\n\napp.initializeApp(config);\n\nvar db = firebase.firestore();\nvar storage = firebase.storage();\n\nexport { db, storage };\n","import React from 'react';\nimport { db } from './Firebase/firebase';\n// import {\n//   List,\n//   CellMeasurer,\n//   CellMeasurerCache,\n//   AutoSizer\n// } from 'react-virtualized';\n\nimport Link from '@material-ui/core/Link';\nimport List from '@material-ui/core/List';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport ListItem from '@material-ui/core/ListItem';\nimport Container from '@material-ui/core/Container';\nimport { styled } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\n\nimport EditIcon from '@material-ui/icons/Edit';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\n\nconst CenterContainer = styled(Container)({\n  textAlign: 'center'\n});\n\nexport default class HomeList extends React.Component {\n  state = {\n    openListItemDelete: false\n  };\n\n  getLink(quiz) {\n    if (quiz.config.quiz_id.toString().length === 1 || 2) {\n      return (\n        'https://preprod.daylight-back.themoocagency.com/daylightQuizEditor/quizChapter/pre/chap' +\n        `${quiz.config.quiz_id}`\n      );\n    } else if (quiz.config.quiz_id.toString().length === 3) {\n      return (\n        'https://preprod.daylight-back.themoocagency.com/daylightQuizEditor/quizChapter/post/chap' +\n        `${quiz.config.quiz_id.toString()[2]}`\n      );\n    }\n  }\n\n  quizId = 0;\n  questionSourceId = 0;\n\n  switchOpenDelete = (type, id) => {\n    this.setState({ openListItemDelete: !this.state.openListItemDelete });\n    if (id) {\n      switch (type) {\n        case 'questionSource':\n          this.questionSourceId = id;\n          break;\n        case 'quiz':\n          this.quizId = id;\n          break;\n        default:\n          return;\n      }\n    }\n  };\n\n  handleItemListDelete = type => {\n    if (type === 'questionSource') {\n      db.collection('questions')\n        .doc(this.questionSourceId.toString())\n        .get()\n        .then(async doc => {\n          await db\n            .collection('questions')\n            .doc(this.questionSourceId.toString())\n            .delete()\n            .then(function() {\n              //console.log('Document successfully deleted!');\n            })\n            .catch(function(error) {\n              //console.error('Error removing document: ', error);\n            });\n\n          this.switchOpenDelete();\n          this.props.updateQuestionsAll();\n        });\n    } else if (type === 'quiz') {\n      db.collection('quiz')\n        .doc(this.quizId.toString())\n        .get()\n        .then(async doc => {\n          await db\n            .collection('quiz')\n            .doc(this.quizId.toString())\n            .delete()\n            .then(function() {\n              //console.log('Document successfully deleted!');\n            })\n            .catch(function(error) {\n              //console.error('Error removing document: ', error);\n            });\n\n          this.switchOpenDelete();\n          this.props.updateQuizAll();\n        });\n    }\n  };\n\n  addQuestionSource = () => {\n    db.collection('questions')\n      .doc(\n        (\n          this.props.data[this.props.data.length - 1].questions_id + 1\n        ).toString()\n      )\n      .set({\n        answersList: [1], //TODO ? peupler\n        questions_id:\n          this.props.data[this.props.data.length - 1].questions_id + 1,\n        questions_name:\n          'Source de questions ' + //TODO ?\n          (this.props.data[this.props.data.length - 1].questions_id + 1),\n        quizQuestionList: [\n          {\n            answers: [true, false, false, false],\n            feedback: '',\n            possibilities: ['', '', '', ''],\n            question_id: 1,\n            question_prequel: '',\n            imageURLQB: '',\n            imageURLQE: '',\n            imageNameQB: '',\n            imageNameQE: ''\n          }\n        ]\n      })\n      .then(function() {\n        console.log('Document successfully written!');\n      })\n      .catch(function(error) {\n        console.error('Error writing document: ', error);\n      });\n    this.props.updateQuestionsAll(); //encore useful si open modal ?\n    //todo open modal correspondant\n  };\n\n  addQuiz = () => {\n    db.collection('quiz')\n      .doc((this.props.data.length + 1).toString())\n      .set({\n        config: {\n          quiz_id: this.props.data.length + 1,\n          SubLines: ['', '', '', ''],\n          passScore: 0,\n          quiz_time: 0,\n          setShuffle: false,\n          quiz_title: 'Titre',\n          quiz_title2: 'Sous-titre',\n          pauseButton: false,\n          chronoButton: false,\n          questionsSetId: 1,\n          shuffledAnswers: false,\n          showResultConfig: false,\n          quiz_n_questions: 0,\n          quiz_n_questionsMax: 0,\n          answers_file_name: '',\n          question_file_name: ''\n        }\n      })\n      .then(function() {\n        console.log('Document successfully written!');\n      })\n      .catch(function(error) {\n        console.error('Error writing document: ', error);\n      });\n    this.props.updateQuizAll(); //encore useful si open modal ?\n    //todo open modal correspondant\n  };\n\n  downloadSCORMPackage = quiz => {\n    if (quiz.config.quiz_id.toString().length === 1 || 2) {\n      return `https://preprod.daylight-back.themoocagency.com/daylightQuizEditor/quizChapter/pre/chap${\n        quiz.config.quiz_id\n      }/chap${quiz.config.quiz_id}.zip`;\n    } else if (quiz.config.quiz_id.toString().length === 3) {\n      return `https://preprod.daylight-back.themoocagency.com/daylightQuizEditor/quizChapter/post/chap${\n        quiz.config.quiz_id.toString()[2]\n      }chap${quiz.config.quiz_id.toString()[2]}.zip`;\n    }\n  };\n\n  //REACT VIRTUALIZED\n  // rowRenderer = ({ key, index, parent, style, isScrolling, isVisible }) => {\n  //   const { isQuestionList, data } = this.props;\n\n  //   const title = isQuestionList\n  //     ? data[index].questions_name\n  //     : data[index].config.quiz_title + ' // ' + data[index].config.quiz_title2;\n  //   return (\n  //     <CellMeasurer\n  //       key={key}\n  //       cache={this.cache}\n  //       parent={parent}\n  //       columnIndex={0}\n  //       rowIndex={index}\n  //     >\n  //       <ListItem button key={index} style={style}>\n  //         <ListItemText primary={title} edge='start' aria-label={title} />\n  //         <ListItemSecondaryAction>\n  //           {!isQuestionList && (\n  //             <React.Fragment>\n  //               <Tooltip title='Configurer le quiz'>\n  //                 <IconButton\n  //                   onClick={() =>\n  //                     this.props.handleClick(data[index], isQuestionList)\n  //                   }\n  //                 >\n  //                   <SettingsIcon />\n  //                 </IconButton>\n  //               </Tooltip>\n  //               <Tooltip title='Prévisualiser'>\n  //                 <Link href={this.getLink(data[index])} target='_blank'>\n  //                   {/* TODO PERFORMANCE, those are render every time, can be heavy! */}\n  //                   <IconButton edge='start' aria-label='Prévisualiser'>\n  //                     <VisibilityIcon />\n  //                   </IconButton>\n  //                 </Link>\n  //               </Tooltip>\n  //               <Tooltip title='Télécharger le paquet SCORM'>\n  //                 <Link\n  //                   href={this.downloadSCORMPackage(data[index])}\n  //                   target='_blank'\n  //                 >\n  //                   <IconButton\n  //                     edge='start'\n  //                     aria-label='Télécharger le paquet SCORM'\n  //                   >\n  //                     <GetAppIcon />\n  //                   </IconButton>\n  //                 </Link>\n  //               </Tooltip>\n  //             </React.Fragment>\n  //           )}\n\n  //           {isQuestionList && (\n  //             <React.Fragment>\n  //               <Tooltip title='Éditer la source de questions'>\n  //                 <IconButton\n  //                   onClick={() =>\n  //                     this.props.handleClick(data[index], isQuestionList)\n  //                   }\n  //                   edge='start'\n  //                   aria-label='Éditer la source de questions'\n  //                 >\n  //                   <EditIcon />\n  //                 </IconButton>\n  //               </Tooltip>\n  //               {/* <Tooltip title='Export XLSX'>\n  //                         <IconButton\n  //                           edge='start'\n  //                           aria-label='Export XLSX'\n  //                           onClick={() => console.log(data[index])}\n  //                         >\n  //                           <ArrowDownwardIcon />\n  //                         </IconButton>\n  //                       </Tooltip> */}\n  //               {/*\n  //                       <Tooltip title='Import XLSX'>\n  //                         <IconButton edge='start' aria-label='Import XLSX'>\n  //                           <ArrowUpwardIcon />\n  //                         </IconButton>\n  //                       </Tooltip>\n  //                       <input\n  //                         type='file'\n  //                         accept='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n  //                         onChange={e => this.importXLSX(e)} //+data(actualQuestionsSources in Accueil)\n  //                       /> */}\n  //             </React.Fragment>\n  //           )}\n  //           <Tooltip\n  //             title={\n  //               isQuestionList\n  //                 ? 'Supprimer la source de questions'\n  //                 : 'Supprimer le quiz'\n  //             }\n  //           >\n  //             <IconButton\n  //               edge='start'\n  //               aria-label={\n  //                 isQuestionList\n  //                   ? 'Supprimer la source de questions'\n  //                   : 'Supprimer le quiz'\n  //               }\n  //               onClick={() =>\n  //                 isQuestionList\n  //                   ? this.switchOpenDelete(\n  //                       'questionSource',\n  //                       data[index].questions_id\n  //                     )\n  //                   : this.switchOpenDelete('quiz', data[index].config.quiz_id)\n  //               }\n  //             >\n  //               <DeleteIcon />\n  //             </IconButton>\n  //           </Tooltip>\n  //         </ListItemSecondaryAction>\n  //       </ListItem>\n  //     </CellMeasurer>\n  //   );\n  // };\n  // cache = new CellMeasurerCache({\n  //   fixedWidth: true,\n  //   defaultHeight: 100\n  // });\n\n  render() {\n    const { isQuestionList } = this.props;\n    return (\n      <React.Fragment>\n        {/* REACT VIRTUALIZED */}\n        {/* <AutoSizer>\n          {({ height, width }) => {\n            return (\n              <List\n                rowCount={this.props.data.length}\n                width={width}\n                height={height}\n                deferredMeasurementCache={this.cache}\n                rowHeight={this.cache.rowHeight}\n                rowRenderer={this.rowRenderer}\n                overscanRowCount={4}\n              />\n            );\n          }}\n        </AutoSizer> */}\n\n        <List\n          component='nav'\n          aria-label={\n            isQuestionList ? 'Liste des sources de questions' : 'Liste des quiz'\n          }\n        >\n          {(this.props.quizSpinner || this.props.questionsSpinner) && (\n            <Grid container justify='center'>\n              <CircularProgress />\n            </Grid>\n          )}\n          {this.props.data &&\n            this.props.data.map((data, index) => {\n              const title = isQuestionList\n                ? data.questions_name\n                : data.config.quiz_title2\n                ? data.config.quiz_title + ' // ' + data.config.quiz_title2\n                : data.config.quiz_title;\n\n              return (\n                <ListItem button key={index}>\n                  <ListItemText\n                    primary={title}\n                    edge='start'\n                    aria-label={title}\n                  />\n                  <ListItemSecondaryAction>\n                    {!isQuestionList && (\n                      <React.Fragment>\n                        <Tooltip title='Configurer le quiz'>\n                          <IconButton\n                            onClick={() =>\n                              this.props.handleClick(data, isQuestionList)\n                            }\n                          >\n                            <SettingsIcon />\n                          </IconButton>\n                        </Tooltip>\n                        <Tooltip title='Prévisualiser'>\n                          <Link href={this.getLink(data)} target='_blank'>\n                            {/* // TODO PERFORMANCE, those are render every time, can be heavy! */}\n                            <IconButton edge='start' aria-label='Prévisualiser'>\n                              <VisibilityIcon />\n                            </IconButton>\n                          </Link>\n                        </Tooltip>\n                        <Tooltip title='Télécharger le paquet SCORM'>\n                          <Link\n                            href={this.downloadSCORMPackage(data)}\n                            target='_blank'\n                          >\n                            <IconButton\n                              edge='start'\n                              aria-label='Télécharger le paquet SCORM'\n                            >\n                              <GetAppIcon />\n                            </IconButton>\n                          </Link>\n                        </Tooltip>\n                      </React.Fragment>\n                    )}\n\n                    {isQuestionList && (\n                      <React.Fragment>\n                        <Tooltip title='Éditer la source de questions'>\n                          <IconButton\n                            onClick={() =>\n                              this.props.handleClick(data, isQuestionList)\n                            }\n                            edge='start'\n                            aria-label='Éditer la source de questions'\n                          >\n                            <EditIcon />\n                          </IconButton>\n                        </Tooltip>\n                      </React.Fragment>\n                    )}\n                    <Tooltip\n                      title={\n                        isQuestionList\n                          ? 'Supprimer la source de questions'\n                          : 'Supprimer le quiz'\n                      }\n                    >\n                      <IconButton\n                        edge='start'\n                        aria-label={\n                          isQuestionList\n                            ? 'Supprimer la source de questions'\n                            : 'Supprimer le quiz'\n                        }\n                        onClick={() =>\n                          isQuestionList\n                            ? this.switchOpenDelete(\n                                'questionSource',\n                                data.questions_id\n                              )\n                            : this.switchOpenDelete('quiz', data.config.quiz_id)\n                        }\n                      >\n                        <DeleteIcon />\n                      </IconButton>\n                    </Tooltip>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              );\n            })}\n        </List>\n\n        <CenterContainer maxWidth='md'>\n          <Tooltip\n            title={\n              isQuestionList\n                ? 'Ajouter une source de questions'\n                : 'Ajouter un quiz'\n            }\n          >\n            <IconButton\n              aria-label={\n                isQuestionList\n                  ? 'Ajouter une source de questions'\n                  : 'Ajouter un quiz'\n              }\n              color='primary'\n              onClick={() =>\n                isQuestionList ? this.addQuestionSource() : this.addQuiz()\n              }\n            >\n              <AddCircle />\n            </IconButton>\n          </Tooltip>\n        </CenterContainer>\n\n        {/*  DELETE QUESTION SOURCE DIALOG */}\n        <Dialog\n          open={this.state.openListItemDelete}\n          onClose={() =>\n            this.switchOpenDelete(isQuestionList ? 'questionSource' : 'quiz')\n          }\n          aria-labelledby='alert-dialog-title'\n        >\n          <DialogTitle id='alert-dialog-title'>\n            {isQuestionList\n              ? 'Supprimer la source de données ?'\n              : 'Supprimer le quiz ?'}\n          </DialogTitle>\n          <DialogActions>\n            <Button\n              onClick={() =>\n                this.switchOpenDelete(\n                  isQuestionList ? 'questionSource' : 'quiz'\n                )\n              }\n              color='primary'\n            >\n              Annuler\n            </Button>\n            <Button\n              onClick={() =>\n                isQuestionList\n                  ? this.handleItemListDelete('questionSource')\n                  : this.handleItemListDelete('quiz')\n              }\n              color='secondary'\n              autoFocus\n            >\n              Supprimer\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\n\nimport { db } from '../components/Firebase/firebase';\n\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Typography from '@material-ui/core/Typography';\nimport { styled } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nimport SaveIcon from '@material-ui/icons/Save';\n\nconst ModalContainer = styled(Container)({\n  backgroundColor: 'white',\n  minHeight: '500px',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  position: 'fixed',\n  maxWidth: '90%',\n  paddingRight: '90px',\n  //\n  overflowY: 'scroll',\n  overflowX: 'visible',\n  height: '88%'\n});\n\nconst MarginTopGrid = styled(Grid)({\n  marginTop: 16\n});\n\nconst WithMarginTypography = styled(Typography)({\n  marginTop: 16\n});\n\nconst FixedHeightGrid = styled(Grid)({\n  height: 70,\n  position: 'relative'\n});\n\nconst FixedGrid = styled(Grid)({\n  marginTop: 12,\n  height: 70,\n  position: 'relative'\n});\n\nconst BackgroundContainer = styled(Container)({\n  margin: '20px 0',\n  paddingTop: '20px',\n  paddingBottom: '30px',\n  backgroundColor: 'rgba(243, 144, 0, 0.1)',\n  maxWidth: 'none'\n});\n\nconst StyledWidthFormControl = styled(FormControl)({\n  width: '830px'\n});\n\nconst StyledFormControlLabel = styled(FormControlLabel)({\n  bottom: 0, //12px\n  position: 'absolute'\n});\n\nconst SaveButton = styled(Button)({\n  position: 'sticky',\n  bottom: '47%',\n  left: '100%',\n  //transform: 'translate(886px, 0px)',\n  transform: 'translate(85px, 0px)',\n\n  height: '80px',\n  width: '80px',\n  borderRadius: '50%'\n});\n\nexport default class QuizConfigModal extends React.Component {\n  state = {\n    SubLines: [],\n    quiz_id: 0,\n    passScore: 0,\n    quiz_time: 0,\n    setShuffle: false,\n    quiz_title: '',\n    quiz_title2: '',\n    pauseButton: false,\n    chronoButton: false,\n    questionsSetId: 0,\n    shuffledAnswers: false,\n    showResultConfig: false,\n    quiz_n_questions: 0,\n    // quiz_n_questionsMax: 0,\n    answers_file_name: '',\n    question_file_name: '',\n    selectedQuestionSet: {}\n  };\n\n  setQuestionSet = () => {\n    db.collection('questions')\n      .where('questions_id', '==', this.state.questionsSetId)\n      .get()\n      .then(querySnapshot => {\n        querySnapshot.forEach(question => {\n          this.setState({ selectedQuestionSet: question.data() });\n        });\n      });\n  };\n\n  componentDidMount = () => {\n    const quiz = this.props.quiz.config;\n    this.setState(\n      {\n        quiz_id: quiz.quiz_id,\n        SubLines: quiz.SubLines,\n        passScore: quiz.passScore,\n        quiz_time: quiz.quiz_time,\n        setShuffle: quiz.setShuffle,\n        quiz_title: quiz.quiz_title,\n        quiz_title2: quiz.quiz_title2,\n        pauseButton: quiz.pauseButton,\n        chronoButton: quiz.chronoButton,\n        questionsSetId: quiz.questionsSetId,\n        shuffledAnswers: quiz.shuffledAnswers,\n        quiz_n_questions: quiz.quiz_n_questions,\n        showResultConfig: quiz.showResultConfig,\n        answers_file_name: quiz.answers_file_name,\n        question_file_name: quiz.question_file_name\n        //quiz_n_questionsMax: quiz.quiz_n_questionsMax\n      },\n      this.setQuestionSet\n    );\n  };\n\n  onTextChange(value, index) {\n    const SubLinesStep = [...this.state.SubLines];\n    SubLinesStep[index] = value;\n    this.setState({ SubLines: SubLinesStep });\n  }\n\n  onCheckBoxChange(type) {\n    switch (type) {\n      case 'setShuffle':\n        this.setState({ setShuffle: !this.state.setShuffle });\n        break;\n      case 'chronoButton':\n        this.setState({ chronoButton: !this.state.chronoButton });\n        break;\n      case 'pauseButton':\n        this.setState({ pauseButton: !this.state.pauseButton });\n        break;\n      case 'showResultConfig':\n        this.setState({ showResultConfig: !this.state.showResultConfig });\n        break;\n      case 'shuffledAnswers':\n        this.setState({ shuffledAnswers: !this.state.shuffledAnswers });\n        break;\n      default:\n        return;\n    }\n  }\n\n  onValueChange(value, type) {\n    switch (type) {\n      case 'quiz_time':\n        this.setState({ quiz_time: value });\n        break;\n      // case 'quiz_n_questionsMax':\n      //   this.setState({ quiz_n_questionsMax: value });\n      //   break;\n      case 'quiz_n_questions':\n        this.setState({ quiz_n_questions: value });\n        break;\n      case 'passScore':\n        this.setState({ passScore: value });\n        break;\n      default:\n        return;\n    }\n  }\n\n  handleSaveConfig = () => {\n    const quiz = this.props.quiz.config;\n\n    db.collection('quiz')\n      .doc(quiz.quiz_id.toString())\n      .get()\n      .then(async () => {\n        // peupler configPre et configPost !!-> change selon quiz_id (attention méthode à revoir à terme)\n        //if pre quiz\n        if (quiz.quiz_id.toString().length === 1 || 2) {\n          await db\n            .collection('quiz')\n            .doc(quiz.quiz_id.toString())\n            .set({\n              configPre: {\n                quiz_id: this.state.quiz_id,\n                SubLines: this.state.SubLines,\n                passScore: this.state.passScore,\n                quiz_time: this.state.quiz_time,\n                setShuffle: this.state.setShuffle,\n                quiz_title: this.state.quiz_title,\n                quiz_title2: this.state.quiz_title2,\n                pauseButton: this.state.pauseButton,\n                chronoButton: this.state.chronoButton,\n                showResultConfig: this.state.showResultConfig,\n                quiz_n_questions: this.state.quiz_n_questions,\n                answers_file_name: this.state.answers_file_name,\n                question_file_name: this.state.question_file_name\n                //quiz_n_questionsMax: this.state.quiz_n_questionsMax\n              },\n              config: {\n                quiz_id: this.state.quiz_id,\n                SubLines: this.state.SubLines,\n                passScore: this.state.passScore,\n                quiz_time: this.state.quiz_time,\n                setShuffle: this.state.setShuffle,\n                quiz_title: this.state.quiz_title,\n                quiz_title2: this.state.quiz_title2,\n                pauseButton: this.state.pauseButton,\n                chronoButton: this.state.chronoButton,\n                showResultConfig: this.state.showResultConfig,\n                quiz_n_questions: this.state.quiz_n_questions,\n                answers_file_name: this.state.answers_file_name,\n                question_file_name: this.state.question_file_name,\n                //quiz_n_questionsMax: this.state.quiz_n_questionsMax,\n\n                shuffledAnswers: this.state.shuffledAnswers,\n                questionsSetId: this.state.questionsSetId\n              },\n              configPost: this.props.quiz.configPost || this.props.quiz.config\n            })\n            .then(function() {\n              //console.log('Document successfully written!');\n            })\n            .catch(function(error) {\n              //console.error('Error writing document: ', error);\n              return;\n            });\n        } //if post quiz\n        else if (quiz.quiz_id.toString().length === 3) {\n          await db\n            .collection('quiz')\n            .doc(quiz.quiz_id.toString())\n            .set({\n              configPost: {\n                quiz_id: this.state.quiz_id,\n                SubLines: this.state.SubLines,\n                passScore: this.state.passScore,\n                quiz_time: this.state.quiz_time,\n                setShuffle: this.state.setShuffle,\n                quiz_title: this.state.quiz_title,\n                quiz_title2: this.state.quiz_title2,\n                pauseButton: this.state.pauseButton,\n                chronoButton: this.state.chronoButton,\n                showResultConfig: this.state.showResultConfig,\n                quiz_n_questions: this.state.quiz_n_questions,\n                answers_file_name: this.state.answers_file_name,\n                question_file_name: this.state.question_file_name\n                //quiz_n_questionsMax: this.state.quiz_n_questionsMax\n              },\n              config: {\n                quiz_id: this.state.quiz_id,\n                SubLines: this.state.SubLines,\n                passScore: this.state.passScore,\n                quiz_time: this.state.quiz_time,\n                setShuffle: this.state.setShuffle,\n                quiz_title: this.state.quiz_title,\n                quiz_title2: this.state.quiz_title2,\n                pauseButton: this.state.pauseButton,\n                chronoButton: this.state.chronoButton,\n                showResultConfig: this.state.showResultConfig,\n                quiz_n_questions: this.state.quiz_n_questions,\n                answers_file_name: this.state.answers_file_name,\n                question_file_name: this.state.question_file_name,\n                //quiz_n_questionsMax: this.state.quiz_n_questionsMax,\n\n                shuffledAnswers: this.state.shuffledAnswers,\n                questionsSetId: this.state.questionsSetId\n              },\n              configPre: this.props.quiz.configPre || this.props.quiz.config\n            })\n            .then(function() {\n              //console.log('Document successfully written!');\n            })\n            .catch(function(error) {\n              //console.error('Error writing document: ', error);\n              return;\n            });\n        }\n        this.props.switchDataSend();\n        this.props.handleCloseModal('config');\n      });\n  };\n\n  render() {\n    const {\n      SubLines,\n      quiz_time,\n      passScore,\n      setShuffle,\n      quiz_title,\n      quiz_title2,\n      pauseButton,\n      chronoButton,\n      questionsSetId,\n      shuffledAnswers,\n      showResultConfig,\n      quiz_n_questions,\n      //quiz_n_questionsMax,\n      selectedQuestionSet\n    } = this.state;\n\n    return (\n      <React.Fragment>\n        <ModalContainer>\n          <BackgroundContainer>\n            <TextField\n              id='quiz-title'\n              label='Titre du Quiz'\n              value={quiz_title}\n              onChange={e => this.setState({ quiz_title: e.target.value })}\n              margin='normal'\n              fullWidth={true}\n            />\n            <TextField\n              id='quiz-title2'\n              label='Sous-titre du Quiz'\n              value={quiz_title2}\n              onChange={e => this.setState({ quiz_title2: e.target.value })}\n              margin='normal'\n              fullWidth={true}\n            />\n            {SubLines && (\n              <WithMarginTypography\n                variant='caption'\n                color='textSecondary'\n                display='block'\n              >\n                Texte d'introduction\n              </WithMarginTypography>\n            )}\n            {SubLines &&\n              SubLines.map((line, index) => {\n                return (\n                  <TextField\n                    key={index}\n                    id='SubLines'\n                    multiline\n                    value={line}\n                    onChange={e => this.onTextChange(e.target.value, index)}\n                    margin='none'\n                    fullWidth={true}\n                  />\n                );\n              })}\n\n            <MarginTopGrid container spacing={3}>\n              <FixedHeightGrid item xs={4}>\n                <StyledFormControlLabel\n                  control={<Checkbox color='primary' />}\n                  label='Affichage aléatoire des questions'\n                  labelPlacement='start'\n                  checked={setShuffle}\n                  onChange={() => this.onCheckBoxChange('setShuffle')}\n                />\n              </FixedHeightGrid>\n            </MarginTopGrid>\n            <Grid container spacing={3}>\n              <FixedHeightGrid item xs={4}>\n                <StyledFormControlLabel\n                  control={<Checkbox color='primary' />}\n                  label='Minuteur'\n                  labelPlacement='start'\n                  checked={chronoButton}\n                  onChange={() => this.onCheckBoxChange('chronoButton')}\n                />\n              </FixedHeightGrid>\n              {chronoButton && (\n                <React.Fragment>\n                  <FixedHeightGrid item xs={4}>\n                    <TextField\n                      fullWidth={true}\n                      id='quiz_time'\n                      label='Durée du quiz (min)'\n                      value={quiz_time}\n                      onChange={e =>\n                        this.onValueChange(\n                          parseInt(e.target.value),\n                          'quiz_time'\n                        )\n                      }\n                      type='number'\n                      margin='none'\n                    />\n                  </FixedHeightGrid>\n                  <FixedHeightGrid item xs={4}>\n                    <StyledFormControlLabel\n                      control={<Checkbox color='primary' />}\n                      label='Pause'\n                      labelPlacement='start'\n                      checked={pauseButton}\n                      onChange={() => this.onCheckBoxChange('pauseButton')}\n                    />\n                  </FixedHeightGrid>\n                </React.Fragment>\n              )}\n            </Grid>\n            <Grid container spacing={3}>\n              <FixedHeightGrid item xs={4}>\n                <StyledFormControlLabel\n                  control={<Checkbox color='primary' />}\n                  label='Masquer les réponses'\n                  labelPlacement='start'\n                  checked={showResultConfig}\n                  onChange={() => this.onCheckBoxChange('showResultConfig')}\n                />\n              </FixedHeightGrid>\n              <FixedHeightGrid item xs={4}>\n                <StyledFormControlLabel\n                  control={<Checkbox color='primary' />}\n                  label='Ordre aléatoire des réponses'\n                  labelPlacement='start'\n                  checked={shuffledAnswers}\n                  onChange={() => this.onCheckBoxChange('shuffledAnswers')}\n                />\n              </FixedHeightGrid>\n            </Grid>\n          </BackgroundContainer>\n\n          <BackgroundContainer>\n            <StyledWidthFormControl>\n              <InputLabel>Sources de données</InputLabel>\n              <Select\n                value={questionsSetId}\n                onChange={e =>\n                  this.setState(\n                    { questionsSetId: e.target.value },\n                    this.setQuestionSet\n                  )\n                }\n                // inputProps={{\n                //   name: 'age',\n                //   id: 'age-simple',\n                // }}\n              >\n                {this.props.questionsAll &&\n                  this.props.questionsAll.map((questions, index) => {\n                    return (\n                      <MenuItem key={index} value={questions.questions_id}>\n                        {questions.questions_name}\n                      </MenuItem>\n                    );\n                  })}\n              </Select>\n            </StyledWidthFormControl>\n            <Grid container spacing={3}>\n              <FixedGrid item xs={4}>\n                <Typography variant='caption' color='textSecondary'>\n                  Nombre de questions total\n                </Typography>\n                <Typography>\n                  {selectedQuestionSet.quizQuestionList &&\n                    selectedQuestionSet.quizQuestionList.length}\n                </Typography>\n              </FixedGrid>\n              <FixedHeightGrid item xs={4}>\n                <TextField\n                  fullWidth={true}\n                  id='quiz-questions'\n                  label='Nombre de questions à afficher'\n                  // error={\n                  //   quiz_n_questions >\n                  //   selectedQuestionSet.quizQuestionList.length\n                  // }\n                  value={quiz_n_questions}\n                  onChange={e =>\n                    this.onValueChange(\n                      parseInt(e.target.value),\n                      'quiz_n_questions'\n                    )\n                  }\n                  type='number'\n                  margin='normal'\n                />\n              </FixedHeightGrid>\n              <FixedHeightGrid item xs={4}>\n                <TextField\n                  fullWidth={true}\n                  id='quiz-questions'\n                  label='Seuil de succès'\n                  // error={passScore > quiz_n_questions}\n                  value={passScore}\n                  onChange={e =>\n                    this.onValueChange(parseInt(e.target.value), 'passScore')\n                  }\n                  type='number'\n                  margin='normal'\n                />\n              </FixedHeightGrid>\n            </Grid>\n          </BackgroundContainer>\n\n          <SaveButton\n            variant='contained'\n            color='secondary'\n            size='large'\n            onClick={this.handleSaveConfig}\n          >\n            <SaveIcon />\n            Save\n          </SaveButton>\n        </ModalContainer>\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\n// import styled from 'styled-components';\nimport Img from 'react-image';\nimport firebase from 'firebase';\nimport FileUploader from 'react-firebase-file-uploader';\nimport { storage } from './Firebase/firebase';\n\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport { Typography } from '@material-ui/core';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormLabel from '@material-ui/core/FormLabel';\n//import { styled } from '@material-ui/core/styles';\nimport * as styledMU from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Popover from '@material-ui/core/Popover';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\n\nconst MaxImage = styledMU.styled(Img)`\n  width: 100%;\n  height: 100%;\n`;\n\nconst BackgroundContainer = styledMU.styled(Container)({\n  //margin: '20px 0',\n  paddingTop: '20px',\n  paddingBottom: '30px',\n  backgroundColor: 'rgba(243, 144, 0, 0.1)',\n  maxWidth: 'none'\n});\n\nconst CenterContentGrid = styledMU.styled(Grid)({\n  width: 168,\n  height: 177,\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center',\n  flexDirection: 'column'\n});\n\nconst PaddingTypography = styledMU.styled(Typography)({\n  paddingRight: 10\n});\n\nexport default class EditQuestion extends React.Component {\n  state = {\n    answers: [],\n    feedback: '',\n    possibilities: [],\n    question_id: 0,\n    question_prequel: '',\n    //\n    progressQB: 0, //Question Begin\n    progressQE: 0, //Question End\n    isUploadingQB: false,\n    isUploadingQE: false,\n    openQuestionDelete: false,\n    openReponseDelete: false,\n    //\n    imageURLQB: '',\n    imageURLQE: '',\n    imageNameQB: '',\n    imageNameQE: '',\n    //\n    openPopoverEnonce: false,\n    openPopoverExplication: false\n  };\n\n  componentDidMount = () => {\n    this.setQuestion();\n  };\n\n  static getDerivedStateFromProps = (nextProps, prevState) => {\n    if (nextProps.question.question_id === prevState.question_id) {\n      return null;\n    }\n    const { question } = nextProps;\n    return {\n      answers: question.answers,\n      feedback: question.feedback,\n      possibilities: question.possibilities,\n      question_id: question.question_id,\n      question_prequel: question.question_prequel,\n      imageURLQB: question.imageURLQB,\n      imageURLQE: question.imageURLQE,\n      imageNameQB: question.imageNameQB,\n      imageNameQE: question.imageNameQE\n    };\n  };\n  // ANOTHER METHOD TO UPDATE STATE DEPENDING ON PROPS, BUT getDerivedStateFromProps SEEMS BETTER AT PERFORMANCE\n  // see here https://twitter.com/dan_abramov/status/977181473424932864?lang=fr\n  //   componentDidUpdate = prevProps => {\n  //     //necessary for delete question to work\n  //     if (prevProps.question.question_id !== this.props.question.question_id) {\n  //       this.setQuestion();\n  //     }\n  //   };\n\n  setQuestion = () => {\n    const { question } = this.props;\n    this.setState({\n      answers: question.answers,\n      feedback: question.feedback,\n      possibilities: question.possibilities,\n      question_id: question.question_id,\n      question_prequel: question.question_prequel,\n      imageURLQB: question.imageURLQB,\n      imageURLQE: question.imageURLQE,\n      imageNameQB: question.imageNameQB,\n      imageNameQE: question.imageNameQE\n    });\n  };\n\n  getQuestionObject = () => {\n    return {\n      answers: this.state.answers,\n      feedback: this.state.feedback,\n      possibilities: this.state.possibilities,\n      question_id: this.state.question_id,\n      question_prequel: this.state.question_prequel,\n      imageURLQB: this.state.imageURLQB,\n      imageURLQE: this.state.imageURLQE,\n      imageNameQB: this.state.imageNameQB,\n      imageNameQE: this.state.imageNameQE\n    };\n  };\n\n  //QB\n  handleUploadStartQB = () =>\n    this.setState({ isUploadingQB: true, progressQB: 0 });\n  handleProgressQB = progressQB => this.setState({ progressQB });\n  handleUploadErrorQB = error => {\n    this.setState({ isUploadingQB: false });\n    console.error(error);\n  };\n  handleUploadSuccessQB = filename => {\n    this.setState({\n      imageNameQB: filename,\n      progressQB: 100,\n      isUploadingQB: false\n    });\n    firebase\n      .storage()\n      .ref(this.props.questions_id.toString())\n      .child(filename)\n      .getDownloadURL()\n      .then(url =>\n        this.setState({ imageURLQB: url, progressQB: 0 }, () =>\n          this.props.saveQuestionLocalChange(\n            this.getQuestionObject(),\n            this.props.number\n          )\n        )\n      );\n  };\n\n  //QE\n  handleUploadStartQE = () =>\n    this.setState({ isUploadingQE: true, progressQE: 0 });\n  handleProgressQE = progressQE => this.setState({ progressQE });\n  handleUploadErrorQE = error => {\n    this.setState({ isUploadingQE: false });\n    console.error(error);\n  };\n  handleUploadSuccessQE = filename => {\n    this.setState({\n      imageNameQE: filename,\n      progressQE: 100,\n      isUploadingQE: false\n    });\n    firebase\n      .storage()\n      .ref(this.props.questions_id.toString())\n      .child(filename)\n      .getDownloadURL()\n      .then(url =>\n        this.setState({ imageURLQE: url, progressQE: 0 }, () =>\n          this.props.saveQuestionLocalChange(\n            this.getQuestionObject(),\n            this.props.number\n          )\n        )\n      );\n  };\n\n  onTextChange = (value, index) => {\n    const possibilitiesStep = [...this.state.possibilities];\n    possibilitiesStep[index] = value;\n    this.setState({ possibilities: possibilitiesStep }, () =>\n      this.props.saveQuestionLocalChange(\n        this.getQuestionObject(),\n        this.props.number\n      )\n    );\n  };\n\n  handleChangeCheckbox = (answerIndex, questionIndex) => {\n    const answersStep = [...this.state.answers];\n    answersStep[answerIndex] = !answersStep[answerIndex];\n    this.setState({ answers: answersStep }, () =>\n      this.props.saveQuestionLocalChange(\n        this.getQuestionObject(),\n        this.props.number\n      )\n    );\n  };\n\n  repIndex = 0;\n\n  switchOpenDelete = (type, repIndex) => {\n    if (type === 'question') {\n      this.setState({ openQuestionDelete: !this.state.openQuestionDelete });\n    } else if (type === 'reponse') {\n      this.setState({ openReponseDelete: !this.state.openReponseDelete });\n      this.repIndex = repIndex;\n    }\n  };\n\n  handleQuestionDelete = () => {\n    this.props.handleDeleteQuestion(this.props.number);\n    this.switchOpenDelete('question');\n  };\n\n  handleReponseDelete = () => {\n    const possStep = [...this.state.possibilities];\n    possStep.splice(this.repIndex, 1);\n    this.setState(\n      {\n        possibilities: possStep\n      },\n      this.switchOpenDelete('reponse')\n    );\n  };\n\n  handleClickPopoverEnonce(e) {\n    e.preventDefault();\n    this.setState({\n      openPopoverEnonce: !this.state.openPopoverEnonce,\n      anchorElEnonce: e.currentTarget\n    });\n  }\n  handleClosePopoverEnonce() {\n    this.setState({\n      openPopoverEnonce: false\n    });\n  }\n\n  handleClickPopoverExplication(e) {\n    e.preventDefault();\n    this.setState({\n      openPopoverExplication: !this.state.openPopoverExplication,\n      anchorElExplication: e.currentTarget\n    });\n  }\n  handleClosePopoverExplication() {\n    this.setState({\n      openPopoverExplication: false\n    });\n  }\n\n  render() {\n    return (\n      <BackgroundContainer style={this.props.style}>\n        <Grid container spacing={3}>\n          {/* NUMÉRO QUESTION */}\n          <CenterContentGrid item align='center' xs={2}>\n            <Typography variant='h3'>Q{this.props.number + 1}</Typography>\n            <Tooltip title={'Supprimer la question'}>\n              <IconButton\n                aria-label={'Supprimer la question'}\n                //color='primary'\n                onClick={() => this.switchOpenDelete('question')}\n              >\n                <DeleteIcon />\n              </IconButton>\n            </Tooltip>\n          </CenterContentGrid>\n          {/* ÉNONCÉ */}\n          <Grid item xs={8}>\n            <TextField\n              id='outlined-multiline-flexible'\n              label='Énoncé'\n              multiline\n              //rowsMax='10'\n              value={this.state.question_prequel}\n              onChange={e =>\n                this.setState({ question_prequel: e.target.value }, () =>\n                  this.props.saveQuestionLocalChange(\n                    this.getQuestionObject(),\n                    this.props.number\n                  )\n                )\n              }\n              margin='normal'\n              variant='outlined'\n              fullWidth={true}\n            />\n          </Grid>\n          {/* IMAGE ÉNONCÉ */}\n          <CenterContentGrid item xs={2}>\n            {this.state.imageURLQB && (\n              <React.Fragment>\n                <Button\n                  aria-describedby={\n                    this.state.openPopoverEnonce\n                      ? 'mouse-over-popover-enonce'\n                      : undefined\n                  }\n                  size='small'\n                  variant='contained'\n                  onClick={e => this.handleClickPopoverEnonce(e)}\n                >\n                  Voir l'image importée\n                </Button>\n                <Popover\n                  id='mouse-over-popover-enonce'\n                  open={this.state.openPopoverEnonce}\n                  anchorEl={this.state.anchorElEnonce}\n                  anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right'\n                  }}\n                  transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right'\n                  }}\n                  onClose={() => this.handleClosePopoverEnonce()}\n                  disableRestoreFocus\n                >\n                  <MaxImage\n                    src={this.state.imageURLQB}\n                    alt='Source uploadée'\n                    loader={<CircularProgress />}\n                  />\n                </Popover>\n\n                <Tooltip title={\"Supprimer l'image\"}>\n                  <IconButton\n                    aria-label={\"Supprimer l'image\"}\n                    //color='primary'\n                    onClick={\n                      () => this.setState({ imageURLQB: '', imageNameQB: '' }) //TODO delete in firebase storage too\n                    }\n                  >\n                    <DeleteIcon />\n                  </IconButton>\n                </Tooltip>\n              </React.Fragment>\n            )}\n            <Tooltip title=\"Choisir un fichier image pour l'énoncé\">\n              <FormLabel>\n                <CloudUploadIcon fontSize='large' />\n                <FileUploader\n                  accept='image/*'\n                  name='quiz-begin'\n                  filename={file =>\n                    'sourceID-' +\n                    this.props.questions_id +\n                    '-questionNb-' +\n                    (this.props.number + 1) +\n                    '-QB'\n                  }\n                  storageRef={storage.ref(this.props.questions_id.toString())}\n                  onUploadStart={this.handleUploadStartQB}\n                  onUploadError={this.handleUploadErrorQB}\n                  onUploadSuccess={this.handleUploadSuccessQB}\n                  onProgress={this.handleProgressQB}\n                  hidden\n                />\n              </FormLabel>\n            </Tooltip>\n          </CenterContentGrid>\n        </Grid>\n        {/* LISTE DES RÉPONSES */}\n        {this.state.possibilities.map((rep, index) => {\n          return (\n            <Grid container key={index}>\n              <Grid item xs={1}>\n                <PaddingTypography variant='h6' align='right'>\n                  {index + 1}\n                </PaddingTypography>\n              </Grid>\n              <Grid item xs={9}>\n                <TextField\n                  multiline\n                  value={rep}\n                  onChange={e => this.onTextChange(e.target.value, index)}\n                  margin='none'\n                  fullWidth={true}\n                />\n              </Grid>\n              <Grid item xs={2}>\n                <Checkbox\n                  checked={this.state.answers[index]}\n                  onChange={e =>\n                    this.handleChangeCheckbox(index, this.props.number)\n                  }\n                />\n\n                <Tooltip title={'Supprimer la réponse'}>\n                  <IconButton\n                    aria-label={'Supprimer la réponse'}\n                    //color='primary'\n                    onClick={() => this.switchOpenDelete('reponse', index)}\n                  >\n                    <DeleteIcon />\n                  </IconButton>\n                </Tooltip>\n              </Grid>\n            </Grid>\n          );\n        })}\n        {/* AJOUTER QUESTION */}\n        <Grid container justify='center'>\n          <Tooltip title={'Ajouter une réponse'}>\n            <IconButton\n              aria-label={'Ajouter une réponse'}\n              //color='primary'\n              onClick={() =>\n                this.setState({\n                  possibilities: this.state.possibilities.concat('')\n                })\n              }\n            >\n              <AddCircle />\n            </IconButton>\n          </Tooltip>\n        </Grid>\n\n        <Grid container spacing={3}>\n          <Grid item xs={1} />\n          {/* EXPLICATION */}\n          <Grid item xs={9}>\n            <TextField\n              id='outlined-multiline-flexible'\n              label='Explication'\n              multiline\n              //rowsMax='10'\n              value={this.state.feedback}\n              onChange={e =>\n                this.setState({ feedback: e.target.value }, () =>\n                  this.props.saveQuestionLocalChange(\n                    this.getQuestionObject(),\n                    this.props.number\n                  )\n                )\n              }\n              margin='normal'\n              variant='outlined'\n              fullWidth={true}\n            />\n          </Grid>\n          {/* IMAGE EXPLICATION */}\n          <CenterContentGrid item xs={2}>\n            {this.state.imageURLQE && (\n              <React.Fragment>\n                <Button\n                  aria-describedby={\n                    this.state.openPopoverExplication\n                      ? 'mouse-over-popover-explication'\n                      : undefined\n                  }\n                  size='small'\n                  variant='contained'\n                  onClick={e => this.handleClickPopoverExplication(e)}\n                >\n                  Voir l'image importée\n                </Button>\n                <Popover\n                  id='mouse-over-popover-explication'\n                  open={this.state.openPopoverExplication}\n                  anchorEl={this.state.anchorElExplication}\n                  anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'right'\n                  }}\n                  transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right'\n                  }}\n                  onClose={() => this.handleClosePopoverExplication()}\n                  disableRestoreFocus\n                >\n                  <MaxImage\n                    src={this.state.imageURLQE}\n                    alt='Source uploadée'\n                    loader={<CircularProgress />}\n                  />\n                </Popover>\n\n                <Tooltip title={\"Supprimer l'image\"}>\n                  <IconButton\n                    aria-label={\"Supprimer l'image\"}\n                    onClick={\n                      () => this.setState({ imageURLQE: '', imageNameQE: '' }) //TODO delete in firebase storage too\n                    }\n                  >\n                    <DeleteIcon />\n                  </IconButton>\n                </Tooltip>\n              </React.Fragment>\n            )}\n\n            <Tooltip title=\"Choisir un fichier image pour l'explication\">\n              <FormLabel>\n                <CloudUploadIcon fontSize='large' />\n\n                <FileUploader\n                  accept='image/*'\n                  name='quiz-begin'\n                  filename={file =>\n                    'sourceID-' +\n                    this.props.questions_id +\n                    '-questionNb-' +\n                    (this.props.number + 1) +\n                    '-QE'\n                  }\n                  storageRef={storage.ref(this.props.questions_id.toString())}\n                  onUploadStart={this.handleUploadStartQE}\n                  onUploadError={this.handleUploadErrorQE}\n                  onUploadSuccess={this.handleUploadSuccessQE}\n                  onProgress={this.handleProgressQE}\n                  hidden\n                />\n              </FormLabel>\n            </Tooltip>\n          </CenterContentGrid>\n        </Grid>\n\n        {/*  DELETE QUESTION DIALOG */}\n        <Dialog\n          open={this.state.openQuestionDelete}\n          onClose={() => this.switchOpenDelete('question')}\n          aria-labelledby='alert-dialog-title'\n        >\n          <DialogTitle id='alert-dialog-title'>\n            {'Supprimer la question ' + (this.props.number + 1) + ' ?'}\n          </DialogTitle>\n          <DialogActions>\n            <Button\n              onClick={() => this.switchOpenDelete('question')}\n              color='primary'\n            >\n              Annuler\n            </Button>\n            <Button\n              onClick={this.handleQuestionDelete}\n              color='secondary'\n              autoFocus\n            >\n              Supprimer\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n        {/*  DELETE REPONSE DIALOG */}\n        <Dialog\n          open={this.state.openReponseDelete}\n          onClose={() => this.switchOpenDelete('reponse')}\n          aria-labelledby='alert-dialog-title'\n        >\n          <DialogTitle id='alert-dialog-title'>\n            {'Supprimer la réponse ?'}\n          </DialogTitle>\n          <DialogActions>\n            <Button\n              onClick={() => this.switchOpenDelete('reponse')}\n              color='primary'\n            >\n              Annuler\n            </Button>\n            <Button\n              onClick={this.handleReponseDelete}\n              color='secondary'\n              autoFocus\n            >\n              Supprimer\n            </Button>\n          </DialogActions>\n        </Dialog>\n        <hr />\n      </BackgroundContainer>\n    );\n  }\n}\n","import React from 'react';\nimport { db } from './Firebase/firebase';\nimport XLSX from 'xlsx';\nimport _ from 'lodash';\nimport {\n  List,\n  CellMeasurer,\n  CellMeasurerCache,\n  AutoSizer\n} from 'react-virtualized';\n\nimport TextField from '@material-ui/core/TextField';\nimport Container from '@material-ui/core/Container';\nimport { styled } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\n\nimport SaveIcon from '@material-ui/icons/Save';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport SearchIcon from '@material-ui/icons/Search';\n\nimport EditQuestion from './EditQuestion';\n\nconst ModalContainer = styled(Container)({\n  backgroundColor: 'white',\n  minHeight: '500px',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  position: 'fixed',\n  maxWidth: '90%',\n  //paddingRight: '90px',\n  //\n  overflowY: 'scroll',\n  overflowX: 'visible',\n  height: '95%'\n});\n\nconst SaveButton = styled(Button)({\n  height: '50px',\n  width: '50px',\n  borderRadius: '50%'\n});\n\nconst StyledTextField = styled(TextField)({\n  width: '76%'\n});\n\nconst StyledIconButton = styled(IconButton)({\n  width: '19%',\n  alignSelf: 'flex-end'\n});\n\nconst FlexGrid = styled(Grid)({\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center'\n});\n\nconst FlexGrid2 = styled(Grid)({\n  display: 'flex',\n  alignItems: 'baseline'\n});\n\nconst ButtonsGrid = styled(Grid)({\n  display: 'flex',\n  justifyContent: 'center',\n  alignItems: 'center'\n});\n\nexport default class QuestionsConfigModal extends React.Component {\n  state = {\n    answersList: [],\n    questions_id: 0,\n    questions_name: '',\n    quizQuestionList: [],\n    //\n    scrollToIndex: undefined,\n    searchedQuestionNb: ''\n  };\n\n  componentDidMount = () => {\n    const { actualQuestionsSource } = this.props;\n    this.setState({\n      answersList: actualQuestionsSource.answersList,\n      questions_id: actualQuestionsSource.questions_id,\n      questions_name: actualQuestionsSource.questions_name,\n      quizQuestionList: actualQuestionsSource.quizQuestionList\n    });\n  };\n\n  saveQuestionLocalChange = (question, index) => {\n    const quizQuestionListStep = [...this.state.quizQuestionList];\n    quizQuestionListStep[index] = question;\n    this.setState({ quizQuestionList: quizQuestionListStep });\n  };\n\n  onAddNewQuestion = () => {\n    const quizQuestionListStep = [...this.state.quizQuestionList];\n    const newQuestion = {\n      answers: [true, false, false, false],\n      feedback: '',\n      possibilities: ['', '', '', ''],\n      question_id:\n        this.state.quizQuestionList[this.state.quizQuestionList.length - 1]\n          .question_id + 1,\n      question_prequel: '',\n      imageURLQB: '',\n      imageURLQE: '',\n      imageNameQB: '',\n      imageNameQE: ''\n    };\n    quizQuestionListStep.push(newQuestion);\n\n    const answersListStep = Array.from(this.state.answersList);\n    answersListStep.push(1);\n    this.setState(\n      {\n        quizQuestionList: quizQuestionListStep,\n        answersList: answersListStep\n      },\n      () => {\n        this.onScrollToRowChange(this.state.answersList.length);\n      }\n    );\n  };\n\n  handleSaveQuestionsSource = () => {\n    //first peupler answersList\n    const answersListStep = [...this.state.answersList];\n    answersListStep.forEach((item, index) => {\n      answersListStep[index] =\n        this.state.quizQuestionList[index].answers.findIndex(e => e === true) +\n        1;\n    });\n\n    this.setState({ answersList: answersListStep }, () => {\n      // save data to firestore\n      db.collection('questions')\n        .doc(this.state.questions_id.toString())\n        .get()\n        .then(async doc => {\n          await db\n            .collection('questions')\n            .doc(this.state.questions_id.toString())\n            .set({\n              answersList: this.state.answersList,\n              questions_id: this.state.questions_id,\n              questions_name: this.state.questions_name,\n              quizQuestionList: this.state.quizQuestionList\n            })\n            .then(() => console.log('Document successfully written!'))\n            .catch(function(error) {\n              console.error('Error writing document: ', error);\n              return;\n            });\n          this.props.switchDataSend();\n          this.props.handleCloseModal('questions');\n        });\n    });\n  };\n\n  handleDeleteQuestion = index => {\n    const quizQuestionListStep = [...this.state.quizQuestionList];\n    quizQuestionListStep.splice(index, 1);\n    const answersListStep = [...this.state.answersList];\n    answersListStep.splice(index, 1);\n\n    this.setState({\n      quizQuestionList: quizQuestionListStep,\n      answersList: answersListStep\n    });\n  };\n\n  exportXLSX = () => {\n    // Lodash cloneDeep necessary because need to not have shallow copie (several level in this array)\n    const dataToSend = _.cloneDeep(this.state.quizQuestionList);\n    dataToSend.forEach(question => {\n      //transform array to string for XLSX\n      question.answers = question.answers.join();\n      question.possibilities = question.possibilities.join('//');\n    });\n    console.log(this.state.quizQuestionList);\n    console.log(dataToSend);\n    /* make the worksheet */\n    var ws = XLSX.utils.json_to_sheet(dataToSend);\n    /* add to workbook */\n    var wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, 'data');\n    /* generate an XLSX file */\n    XLSX.writeFile(wb, `${this.state.questions_name}.xlsx`);\n  };\n\n  importXLSX = (e, saveOnImportXLSX) => {\n    // import xlsx to json\n    var oFile = e.target.files[0];\n    var reader = new FileReader();\n    reader.onload = function(e) {\n      var data = e.target.result;\n      data = new Uint8Array(data);\n      var workbook = XLSX.read(data, { type: 'array' });\n      //console.log(workbook);\n      var result = {};\n      workbook.SheetNames.forEach(function(sheetName) {\n        var roa = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName]);\n        if (roa.length) result[sheetName] = roa;\n      });\n\n      // see the result, caution: it works after reader event is done.\n      if (reader.readyState) {\n        result.data.forEach(question => {\n          question.answers = question.answers.split(',');\n          //convert string to boolean\n          question.answers = question.answers.map(item => item === 'true');\n          question.possibilities = question.possibilities.split('//');\n        });\n        saveOnImportXLSX(result.data);\n      }\n    };\n    reader.readAsArrayBuffer(oFile);\n  };\n  saveOnImportXLSX = data => {\n    this.setState({ quizQuestionList: data }, () => {\n      this.handleSaveQuestionsSource();\n    });\n  };\n\n  //REACT VIRTUALIZED\n  rowRenderer = ({ key, index, parent, style, isScrolling, isVisible }) => {\n    return (\n      <CellMeasurer\n        key={key}\n        cache={this.cache}\n        parent={parent}\n        columnIndex={0}\n        rowIndex={index}\n      >\n        <EditQuestion\n          style={style}\n          number={index}\n          question={this.state.quizQuestionList[index]}\n          questions_id={this.state.questions_id}\n          handleDeleteQuestion={this.handleDeleteQuestion}\n          saveQuestionLocalChange={this.saveQuestionLocalChange}\n        />\n      </CellMeasurer>\n    );\n  };\n  cache = new CellMeasurerCache({\n    fixedWidth: true,\n    defaultHeight: 600\n  });\n\n  onScrollToRowChange = value => {\n    const rowCount = this.state.quizQuestionList.length;\n    const rowCountIndexBased = parseInt(rowCount, 10) - 1;\n    const questionIndex = parseInt(value) - 1;\n\n    let scrollToIndex = Math.min(rowCountIndexBased, questionIndex);\n\n    if (isNaN(scrollToIndex)) {\n      scrollToIndex = undefined;\n    }\n\n    this.setState({ scrollToIndex });\n  };\n\n  render() {\n    const { questions_name } = this.state;\n    return (\n      <React.Fragment>\n        <ModalContainer>\n          {/* <BackgroundContainer> */}\n          <Grid container spacing={2} justify='space-between'>\n            <FlexGrid2 item xs={5}>\n              <StyledTextField\n                id='questionsSource-title'\n                label='Titre de la source de données'\n                value={questions_name}\n                onChange={e =>\n                  this.setState({ questions_name: e.target.value })\n                }\n                margin='normal'\n                fullWidth={true}\n              />\n              <Typography display='inline'>\n                ({this.state.quizQuestionList.length} questions)\n              </Typography>\n            </FlexGrid2>\n\n            <FlexGrid item xs={3}>\n              <StyledTextField\n                label='Aller à la question n°...'\n                id='question-number'\n                type='number'\n                aria-describedby='Aller à la question n°...'\n                value={this.state.searchedQuestionNb}\n                onChange={e =>\n                  this.setState({ searchedQuestionNb: e.target.value })\n                }\n                margin='normal'\n                error={\n                  this.state.searchedQuestionNb >\n                  this.state.quizQuestionList.length\n                }\n              />\n              <StyledIconButton\n                onClick={e =>\n                  this.onScrollToRowChange(this.state.searchedQuestionNb)\n                }\n              >\n                <SearchIcon />\n              </StyledIconButton>\n            </FlexGrid>\n\n            <FlexGrid item xs={1}>\n              <Tooltip title={'Ajouter une question'}>\n                <IconButton\n                  aria-label={'Ajouter une question'}\n                  //color='primary'\n                  onClick={this.onAddNewQuestion}\n                >\n                  <AddCircle fontSize='large' />\n                </IconButton>\n              </Tooltip>\n            </FlexGrid>\n\n            <ButtonsGrid item xs={1}>\n              <Tooltip title='Export XLSX'>\n                <ArrowDownwardIcon\n                  edge='start'\n                  aria-label='Export XLSX'\n                  onClick={() => this.exportXLSX()}\n                  fontSize='large'\n                />\n              </Tooltip>\n              <input\n                type='file'\n                onChange={e => this.importXLSX(e, this.saveOnImportXLSX)} //+data(actualQuestionsSources in Accueil)\n                accept='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n                style={{ display: 'none' }}\n                id='raised-button-file'\n              />\n              <label htmlFor='raised-button-file'>\n                <Tooltip title='Import XLSX'>\n                  <ArrowUpwardIcon fontSize='large' />\n                </Tooltip>\n              </label>\n            </ButtonsGrid>\n\n            <FlexGrid item xs={1}>\n              <Tooltip title={'Sauvegarder'}>\n                <SaveButton\n                  variant='contained'\n                  color='secondary'\n                  size='large'\n                  onClick={this.handleSaveQuestionsSource}\n                >\n                  <SaveIcon />\n                </SaveButton>\n              </Tooltip>\n            </FlexGrid>\n          </Grid>\n\n          {/* REACT VIRTUALIZED */}\n          <AutoSizer>\n            {({ height, width }) => {\n              return (\n                <List\n                  rowCount={this.state.quizQuestionList.length}\n                  width={width}\n                  height={height}\n                  deferredMeasurementCache={this.cache}\n                  rowHeight={this.cache.rowHeight}\n                  rowRenderer={this.rowRenderer}\n                  overscanRowCount={4}\n                  scrollToIndex={parseInt(this.state.scrollToIndex)}\n                />\n              );\n            }}\n          </AutoSizer>\n          {/* </BackgroundContainer> */}\n        </ModalContainer>\n      </React.Fragment>\n    );\n  }\n}\n","import React from 'react';\n\nimport { db } from '../components/Firebase/firebase';\n\nimport Typography from '@material-ui/core/Typography';\nimport { styled } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Modal from '@material-ui/core/Modal';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport HomeList from '../components/HomeList';\nimport QuizConfigModal from '../components/QuizConfigModal';\nimport QuestionsConfigModal from '../components/QuestionsConfigModal';\n\nconst HeadContainer = styled(Container)({\n  paddingTop: 20\n});\n\nconst ScrollableModal = styled(Modal)({\n  overflow: 'scroll'\n});\n\nclass Accueil extends React.Component {\n  state = {\n    selectedTab: 0,\n    openModalConfig: false,\n    actualQuiz: null,\n    quizAll: [],\n    questionsAll: [],\n    quizDataSend: false,\n    questionsDataSend: false,\n    actualQuestionsSource: null,\n    openQuestionsConfig: false,\n    quizSpinner: false,\n    questionsSpinner: false\n  };\n\n  handleChange = (event, newValue) => {\n    if (newValue === 0) {\n      this.updateQuizAll();\n    } else if (newValue === 1) {\n      this.updateQuestionsAll();\n    }\n    this.setState({ selectedTab: newValue });\n  };\n\n  handleClick = (data, isQuestionList) => {\n    if (isQuestionList) {\n      this.setState({ openQuestionsConfig: true, actualQuestionsSource: data });\n    } else if (!isQuestionList) {\n      this.setState({ openModalConfig: true, actualQuiz: data });\n    }\n  };\n\n  handleCloseModal = type => {\n    switch (type) {\n      case 'config':\n        this.setState({ openModalConfig: false });\n        break;\n      case 'questions':\n        this.setState({ openQuestionsConfig: false });\n        break;\n      default:\n        return;\n    }\n    this.updateQuizAll();\n    this.updateQuestionsAll();\n  };\n\n  handleSnackbarClose = (event, type) => {\n    // if (reason === 'clickaway') {\n    //   return;\n    // }\n    this.switchDataSend(type);\n  };\n\n  switchDataSend = type => {\n    switch (type) {\n      case 'quiz':\n        this.setState({ quizDataSend: !this.state.quizDataSend });\n        break;\n      case 'questions':\n        this.setState({ questionsDataSend: !this.state.questionsDataSend });\n        break;\n      default:\n        return;\n    }\n  };\n\n  updateQuizAll = () => {\n    this.setState(\n      { quizAll: [], quizSpinner: true },\n\n      function() {\n        db.collection('quiz')\n          .orderBy('config.quiz_id', 'asc')\n          .get()\n          .then(querySnapshot => {\n            querySnapshot.forEach(quiz => {\n              const quizAll = this.state.quizAll.concat(quiz.data());\n              this.setState({ quizAll, quizSpinner: false });\n            });\n          });\n      }\n    );\n  };\n\n  updateQuestionsAll = () => {\n    this.setState(\n      { questionsAll: [], questionsSpinner: true },\n\n      function() {\n        db.collection('questions')\n          .orderBy('questions_id', 'asc')\n          .get()\n          .then(querySnapshot => {\n            querySnapshot.forEach(question => {\n              const questionsAll = this.state.questionsAll.concat(\n                question.data()\n              );\n              this.setState({ questionsAll, questionsSpinner: false });\n            });\n          });\n      }\n    );\n  };\n\n  componentDidMount() {\n    if (this.state.selectedTab === 0) {\n      this.updateQuizAll();\n    } else if (this.state.selectedTab === 1) {\n      this.updateQuestionsAll();\n    }\n    // this.updateQuizAll();\n    // this.updateQuestionsAll();\n  }\n\n  render() {\n    const { selectedTab } = this.state;\n    return (\n      <React.Fragment>\n        <HeadContainer maxWidth='md'>\n          <Typography\n            component='h1'\n            variant='h2'\n            align='center'\n            color='textPrimary'\n            gutterBottom\n          >\n            QUIZ MAKER\n          </Typography>\n          <Typography\n            variant='h5'\n            align='center'\n            color='textSecondary'\n            paragraph\n          >\n            Cette interface vous permet d'éditer vos quiz en temps réel.\n          </Typography>\n        </HeadContainer>\n\n        <Tabs\n          value={selectedTab}\n          onChange={this.handleChange}\n          centered={true}\n          textColor='primary'\n        >\n          <Tab label='Quiz' />\n          <Tab label='Sources' />\n        </Tabs>\n\n        {/* QUIZ CONFIG MODAL */}\n        <ScrollableModal\n          aria-labelledby='Quiz Config modal'\n          aria-describedby='Modal pour configurer le quiz'\n          open={this.state.openModalConfig}\n          onClose={() => this.handleCloseModal('config')}\n        >\n          {/* DialogContent here to prevent error of tabIndex (https://stackoverflow.com/questions/53951479/react-material-ui-modal-causing-an-error-with-the-tabindex) */}\n          {/* <DialogContent> */}\n          <QuizConfigModal\n            quiz={this.state.actualQuiz}\n            questionsAll={this.state.questionsAll}\n            handleCloseModal={this.handleCloseModal}\n            switchDataSend={() => this.switchDataSend('quiz')}\n          />\n          {/* </DialogContent> */}\n        </ScrollableModal>\n\n        {/* QUESTIONS MODAL */}\n        <ScrollableModal\n          aria-labelledby='Questions Config modal'\n          aria-describedby='Modal pour configurer les sources de questions'\n          open={this.state.openQuestionsConfig}\n          onClose={() => this.handleCloseModal('questions')}\n        >\n          {/* <DialogContent> */}\n          <QuestionsConfigModal\n            actualQuestionsSource={this.state.actualQuestionsSource}\n            //questionsAll={this.state.questionsAll}\n            handleCloseModal={this.handleCloseModal}\n            switchDataSend={() => this.switchDataSend('questions')}\n          />\n          {/* </DialogContent> */}\n        </ScrollableModal>\n        {selectedTab === 0 && (\n          <Container maxWidth='md'>\n            <HomeList\n              handleClick={this.handleClick}\n              data={this.state.quizAll}\n              //questionsAll={this.state.questionsAll}\n              isQuestionList={false}\n              updateQuizAll={this.updateQuizAll} //todo, in child component\n              quizSpinner={this.state.quizSpinner}\n            />\n          </Container>\n        )}\n        {selectedTab === 1 && (\n          <Container maxWidth='md'>\n            <HomeList\n              handleClick={this.handleClick}\n              data={this.state.questionsAll}\n              //questionsAll={this.state.questionsAll}\n              isQuestionList={true}\n              updateQuestionsAll={this.updateQuestionsAll}\n              length={this.state.questionsAll.length}\n              questionsSpinner={this.state.questionsSpinner}\n            />\n          </Container>\n        )}\n\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left'\n          }}\n          open={this.state.quizDataSend}\n          autoHideDuration={4000}\n          onClose={e => this.handleSnackbarClose(e, 'quiz')}\n          ContentProps={{\n            'aria-describedby': 'message-id'\n          }}\n          message={<span id='message-id'>Configuration sauvegardée !</span>}\n          action={[\n            <IconButton\n              key='close'\n              aria-label='Fermer'\n              color='inherit'\n              onClick={e => this.handleSnackbarClose(e, 'quiz')}\n            >\n              <CloseIcon />\n            </IconButton>\n          ]}\n        />\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left'\n          }}\n          open={this.state.questionsDataSend}\n          autoHideDuration={4000}\n          onClose={e => this.handleSnackbarClose(e, 'questions')}\n          ContentProps={{\n            'aria-describedby': 'message-id'\n          }}\n          message={\n            <span id='message-id'>Source de questions sauvegardée !</span>\n          }\n          action={[\n            <IconButton\n              key='close'\n              aria-label='Fermer'\n              color='inherit'\n              onClick={e => this.handleSnackbarClose(e, 'questions')}\n            >\n              <CloseIcon />\n            </IconButton>\n          ]}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Accueil;\n","import React from 'react';\n\nimport Accueil from './containers/Accueil';\nimport './App.css';\n\nfunction App() {\n  return <Accueil />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}